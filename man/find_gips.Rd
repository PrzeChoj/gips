% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_gips.R
\name{find_gips}
\alias{find_gips}
\title{Find the Gaussian model Invariant by Permutation Symmetry}
\usage{
find_gips(
  g,
  max_iter = NA,
  return_probabilities = FALSE,
  show_progress_bar = TRUE,
  optimizer = NA
)
}
\arguments{
\item{g}{object of \code{gips} class}

\item{max_iter}{number of iterations for an algorithm to perform. At least 2. For \code{optimizer=="MH"} has to be finite; for \code{optimizer=="BG"}, can be infinite; for \code{optimizer=="BF"} it is not used.}

\item{return_probabilities}{boolean. TRUE can only be provided for \code{optimizer=="MH"}. Whether to use \code{Metropolis_Hastings()} results to calculate posterior probabilities.}

\item{show_progress_bar}{boolean. Indicate weather or not show the progress bar.}

\item{optimizer}{the optimizer for the search of the maximum likelihood. Currently the "MH" - Metropolis-Hastings algorithm, or "BG" - best growth algorithm, or "BF" - brute force algorithm, or "continue" to continue the optimization performed on the \code{g} object (see Examples). By default, NA that is changed into "MH" when \code{g} is unoptimized and "continue", when \code{g} is optimized. See #TODO(In "Details" explain: Metropolis_Hastings and best_growth and brute_force)}
}
\value{
object of class gips
}
\description{
Uses one of optimization algorithms to find the permutation that maximizes the likelihood of observed data.
}
\examples{
require("MASS") # for mvrnorm()

perm_size <- 6
mu <- numeric(perm_size)
sigma_matrix <- matrix(
  data = c(
    1.0, 0.8, 0.6, 0.4, 0.6, 0.8,
    0.8, 1.0, 0.8, 0.6, 0.4, 0.6,
    0.6, 0.8, 1.0, 0.8, 0.6, 0.4,
    0.4, 0.6, 0.8, 1.0, 0.8, 0.6,
    0.6, 0.4, 0.6, 0.8, 1.0, 0.8,
    0.8, 0.6, 0.4, 0.6, 0.8, 1.0
  ),
  nrow = perm_size, byrow = TRUE
) # sigma is a matrix invariant under permutation (1,2,3,4,5,6)
number_of_observations <- 13
Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix)
S <- (t(Z) \%*\% Z) / number_of_observations # the theoretical mean is 0

g <- gips(S, number_of_observations)

g_opt <- find_gips(g, max_iter = 10, show_progress_bar = FALSE, optimizer = "MH")
g_opt

g_opt2 <- find_gips(g_opt, max_iter = 10, show_progress_bar = FALSE, optimizer = "continue")

if (require("graphics")) {
  plot(g_opt2, type = "both", logarithmic_x = TRUE)
}

g_opt_BF <- find_gips(g, show_progress_bar = FALSE, optimizer = "BF")
summary(g_opt_BF)
}
