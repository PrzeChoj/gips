% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimization_algorithms.R
\name{gips}
\alias{gips}
\title{Metropolis-Hastings algorithm}
\usage{
gips(
  U,
  number_of_observations,
  max_iter,
  start_perm = NULL,
  delta = 3,
  D_matrix = NULL,
  return_probabilities = FALSE,
  show_progress_bar = TRUE,
  optimizer = "MH"
)
}
\arguments{
\item{U}{matrix, sum of outer products of data. \code{U = sum(t(Z) \%*\% Z)}, where Z is observed data.}

\item{number_of_observations}{number of data points that \code{U} is based on.}

\item{max_iter}{number of iterations for an algorithm to perform. At least 2. For \code{optimizer=="MH"} has to be finite; for \code{optimizer=="BG"}, can be infinite.}

\item{start_perm}{starting permutation for the algorithm; an element of class "cycle". When NULL, identity permutation is taken.}

\item{delta}{hyper-parameter of a Bayesian model. Has to be bigger than 2.}

\item{D_matrix}{hyper-parameter of a Bayesian model. Square matrix of the same size as \code{U}. When NULL, the identity matrix is taken.}

\item{return_probabilities}{boolean. Only for \code{optimizer=="MH"}. Whether to use \code{Metropolis_Hastings()} results to calculate posterior probabilities.}

\item{show_progress_bar}{boolean. Indicate weather or not show the progress bar.}

\item{optimizer}{the optimizer for the search of the maximum likelihood. Currently the "MH" - Metropolis-Hastings algorithm, or "BG" - best growth algorithm. See #TODO(reference appropriate documentation pages: Metropolis_Hastings and best_growth)}
}
\value{
object of class gips; list of 9 or 10 items, depending on optimizer. See #TODO(reference appropriate documentation pages: Metropolis_Hastings and best_growth)
}
\description{
Uses Metropolis-Hastings algorithm to find the permutation that maximizes the likelihood of observed data.
}
\examples{
require(MASS)  # for mvrnorm()

perm_size <- 6
mu <- numeric(perm_size)
# sigma is a matrix invariant under permutation (1,2,3,4,5,6)
sigma_matrix <- matrix(data = c(1.0, 0.8, 0.6, 0.4, 0.6, 0.8,
                                0.8, 1.0, 0.8, 0.6, 0.4, 0.6,
                                0.6, 0.8, 1.0, 0.8, 0.6, 0.4,
                                0.4, 0.6, 0.8, 1.0, 0.8, 0.6,
                                0.6, 0.4, 0.6, 0.8, 1.0, 0.8,
                                0.8, 0.6, 0.4, 0.6, 0.8, 1.0),
                       nrow=perm_size, byrow = TRUE)
number_of_observations <- 13
Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix)
U <- (t(Z) \%*\% Z)
start_perm <- permutations::id
optimization_output <- gips(U=U, number_of_observations=number_of_observations,
                            max_iter=10, start_perm=start_perm,
                            show_progress_bar=FALSE, optimizer="MH")
if (require(graphics)) {
  plot(optimization_output)
}
}
