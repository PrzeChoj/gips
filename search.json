[{"path":"https://przechoj.github.io/gips/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://przechoj.github.io/gips/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"what-are-we-optimizing","dir":"Articles","previous_headings":"","what":"What are we optimizing?","title":"Optimizers","text":"goal find_MAP() find permutation \\(\\sigma\\) maximizes posteriori probability (MAP - Maximum Posteriori). permutation represents plausible symmetry given data. posteriori probability function described -depth Bayesian model selection section vignette(\"Theory\", package=\"gips\"), also available pkgdown page. gips can calculate logarithm log_posteriori_of_gips() function. following paragraphs, refer posteriori probability function \\(f(\\sigma)\\).","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"available-optimizers","dir":"Articles","previous_headings":"","what":"Available optimizers","title":"Optimizers","text":"space permutations enormous - permutation size \\(p\\), space permutations size \\(p!\\) (\\(p\\) factorial). Even \\(p=10\\), space practically impossible browse. find_MAP() implements multiple (3) optimizers choose : \"Metropolis_Hastings\", \"MH\" \"hill_climbing\", \"HC\" \"brute_force\", \"BF\", \"full\" general, recommend Brute Force \\(p\\le 8\\). bigger \\(p>9\\), recommend Metropolis-Hastings.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"note-on-computation-time","dir":"Articles","previous_headings":"Available optimizers","what":"Note on computation time","title":"Optimizers","text":"max_iter parameter functions differently Metropolis-Hastings hill climbing. Metropolis-Hastings, computes posteriori max_iter permutations, whereas hill climbing, computes \\({p\\choose 2} \\cdot\\) max_iter . case Brute Force optimizer, computes \\(p!\\) \\(f(\\sigma)\\) values.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"metropolis-hastings","dir":"Articles","previous_headings":"Available optimizers","what":"Metropolis Hastings","title":"Optimizers","text":"optimizer implementation Second approach [1, Sec 4.1.2]. uses Metropolis-Hastings algorithm optimize space; see Wikipedia. algorithm used context special case Simulated Annealing reader may familiar ; see Wikipedia.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"short-description","dir":"Articles","previous_headings":"Available optimizers > Metropolis Hastings","what":"Short description","title":"Optimizers","text":"every iteration \\(\\), algorithm permutation, say, \\(\\sigma_i\\). random transposition drawn uniformly \\(t_i = (j,k)\\) value \\(f(\\sigma_i \\circ t_i)\\) computed. new value bigger previous one, (.e. \\(f(\\sigma_i \\circ t_i) \\ge f(\\sigma_i)\\)), set \\(\\sigma_{+1} = \\sigma_i \\circ t_i\\). new value smaller (\\(f(\\sigma_i \\circ t_i) < f(\\sigma_i)\\)), choose \\(\\sigma_{+1} = \\sigma_i \\circ t_i\\) probability \\(\\frac{f(\\sigma_i \\circ t_i)}{f(\\sigma_i)}\\). Otherwise, set \\(\\sigma_{+1} = \\sigma_i\\) complementary probability \\(1 - \\frac{f(\\sigma_i \\circ t_i)}{f(\\sigma_i)}\\). final value best \\(\\sigma\\) ever computed.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"notes","dir":"Articles","previous_headings":"Available optimizers > Metropolis Hastings","what":"Notes","title":"Optimizers","text":"algorithm tested multiple settings turned outstanding optimizer. Especially given need hyperparameters tuned. parameter depends max_iter, determines number steps described . One choose number rationally. decided small, missed opportunity find potentially much better permutation. decided big, lost time computational power lead growth. recommendation plot convergence plot logarithmic OX scale: plot(g_map, type = \"\", logarithmic_x = TRUE). decide line flattened already. Keep mind OY scale also logarithmic. example, small change OY scale mean \\(10000\\) times change Posteriori. one decides continue optimization, see Continuation optimization section . algorithm analyzed extensively statisticians. Thanks ergodic theorem, frequency visits given state converges almost surely probability state. approach explained [1, Sec.4.1.2] shown [1, Sec. 5.2]. One can obtain estimates posterior probabilities setting return_probabilities = TRUE.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"example","dir":"Articles","previous_headings":"Available optimizers > Metropolis Hastings","what":"Example","title":"Optimizers","text":"Let’s say data Z unknown process:  just hundred fifty iterations, found permutation unimaginably likely original, () permutation.","code":"perm_size <- 70 mu <- runif(perm_size, -10, 10) # Assume we don't know the mean sigma_matrix <- (function(x){t(x) %*% x})(matrix(rnorm(perm_size*perm_size), nrow = perm_size)) # the real covariance matrix, that we want to estimate number_of_observations <- 50 Z <- withr::with_seed(2022,     code = MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) ) dim(Z) #> [1] 50 70 number_of_observations <- nrow(Z) # 50 perm_size <- ncol(Z) # 70 S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations) suppressMessages( # message from ggplot2   plot(g, type = \"heatmap\") +     ggplot2::scale_x_continuous(breaks = c(1,10,20,30,40,50,60,70)) +     ggplot2::scale_y_reverse(breaks = c(1,10,20,30,40,50,60,70)) ) g_map <- find_MAP(g, max_iter = 150, optimizer = \"Metropolis_Hastings\") #> =============================================================================== g_map #> The permutation (1,15,2,45,8,42,46,16,26,7,49,38,3,22,66,51,62,19,36,44,53,13,25,12,34,4,32,65,6,35,11,31,58,59,48,21,33,23,54,50,63,9,39,29,5,70,68,20,55,18,41,14,69,24,40,60,27,47,64,56,61,57,17,30,67,28,10,37) #>  - was found after 150 log_posteriori calculations #>  - is 2.025e+2713 times more likely than the starting, () permutation. plot(g_map, type = \"both\", logarithmic_x = TRUE)"},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"hill-climbing","dir":"Articles","previous_headings":"Available optimizers","what":"Hill climbing","title":"Optimizers","text":"uses Hill climbing algorithm optimize space; see Wikipedia. performing local optimization iteratively.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"short-description-1","dir":"Articles","previous_headings":"Available optimizers > Hill climbing","what":"Short description","title":"Optimizers","text":"every iteration \\(\\), algorithm permutation; call \\(\\sigma_i\\). values \\(f(\\sigma_i \\circ t)\\) computed every possible transposition \\(t = (j,k)\\). next \\(\\sigma_{+1}\\) one biggest value: \\[\\sigma_{+1} = argmax_{\\text{perm} \\\\text{neighbors}(\\sigma_{})}\\{\\text{posteriori}(perm)\\}\\] : \\[\\text{neighbors}(\\sigma) = \\{\\sigma \\circ (j,k) : 1 \\le j < k \\le \\text{p}\\}\\] algorithm ends neighbors less likely, max_iter achieved. first case, algorithm end local maximum, guarantee also global maximum.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"pseudocode","dir":"Articles","previous_headings":"Available optimizers > Hill climbing","what":"Pseudocode","title":"Optimizers","text":"","code":"hill_climb <- function(g, max_iter) {   perm <- g[[1]]   perm_posteriori <- log_posteriori_of_gips(g)   perm_size <- attr(perm, \"size\")   S <- attr(g, \"S\")   number_of_observations <- attr(g, \"number_of_observations\")      best_neighbor <- NULL   best_neighbor_posteriori <- -Inf      i <- 1      while (best_neighbor_posteriori > perm_posteriori && i < max_iter) {     best_neighbor <- NULL     best_neighbor_posteriori <- -Inf          for (j in 1:(perm_size-1)) {       for (k in (j + 1):perm_size) {         neighbor <- gips:::compose_with_transposition(perm, c(j, k))         neighbor_posteriori <- log_posteriori_of_gips(gips(           S,           number_of_observations,           perm = neighbor         ))                  if (neighbor_posteriori > best_neighbor_posteriori) {           best_neighbor <- neighbor           best_neighbor_posteriori <- neighbor_posteriori         } # end if       } # end for k     } # end for j     i <- i + 1   } # end while      return(best_neighbor) }"},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"example-1","dir":"Articles","previous_headings":"Available optimizers > Hill climbing","what":"Example","title":"Optimizers","text":"Let’s say data Z unknown process:   warning expected.","code":"perm_size <- 25 mu <- runif(perm_size, -10, 10) # Assume we don't know the mean sigma_matrix <- (function(x){t(x) %*% x})(matrix(rnorm(perm_size*perm_size), nrow=perm_size)) # the real covariance matrix, that we want to estimate number_of_observations <- 20 Z <- withr::with_seed(2022,     code = MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) ) dim(Z) #> [1] 20 25 number_of_observations <- nrow(Z) # 20 perm_size <- ncol(Z) # 25 S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations) plot(g, type = \"heatmap\") g_map <- find_MAP(g, max_iter = 2, optimizer = \"hill_climbing\") #> ================================================================================ #> Warning: Hill Climbing algorithm did not converge in 2 iterations! #> ℹ We recommend to run the `find_MAP(optimizer = 'continue')` on the acquired output. #> Warning: The found permutation has n0 = 24 which is bigger than the number_of_observations = 20. #> ℹ The covariance matrix invariant under the found permutation does not have the likelihood properly defined. #> ℹ For more in-depth explanation, see 'Project Matrix - Equation (6)' section in `vignette('Theory', package = 'gips')` or its pkgdown page: https://przechoj.github.io/gips/articles/Theory.html. g_map #> The permutation (2,22)(9,13) #>  - was found after 601 log_posteriori calculations #>  - is 2.976e+33 times more likely than the starting, () permutation. plot(g_map, type = \"both\")"},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"brute-force","dir":"Articles","previous_headings":"Available optimizers","what":"Brute Force","title":"Optimizers","text":"searches whole space . optimizer certainly find actual MAP Estimator. recommended small spaces (\\(p \\le 8\\)). can also browse bigger spaces, required time probably long. machines, \\(p = 9\\) calculations takes around 5 hours. \\(p = 10\\) expect around 40 hours computations.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"example-2","dir":"Articles","previous_headings":"Available optimizers > Brute Force","what":"Example","title":"Optimizers","text":"Let’s say data Z unknown process:","code":"perm_size <- 6 mu <- runif(perm_size, -10, 10) # Assume we don't know the mean sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # the real covariance matrix, that we want to estimate, is invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- withr::with_seed(2022,     code = MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) ) dim(Z) #> [1] 13  6 number_of_observations <- nrow(Z) # 13 perm_size <- ncol(Z) # 6 S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations)  g_map <- find_MAP(g, optimizer = \"brute_force\") #> ================================================================================ g_map #> The permutation (1,6,5,4,3,2) #>  - was found after 720 log_posteriori calculations #>  - is 43706.314 times more likely than the starting, () permutation."},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"continuation-of-the-optimization","dir":"Articles","previous_headings":"","what":"Continuation of the optimization","title":"Optimizers","text":"max_iter reached Metropolis-Hastings hill climbing, optimization stops returns result. Users expected plot result determine converged. necessary, users can continue optimization, shown .  algorithm still significantly improving permutation. reasonable continue :  improvement slowed significantly. fair stop algorithm . Keep mind y scale logarithmic. visually “small” improvement 100 150 iterations huge, \\(10^{52}\\) times posteriori.","code":"# the same code as for generating example for Metripolis-Hastings above  perm_size <- 70 mu <- runif(perm_size, -10, 10) # Assume we don't know the mean sigma_matrix <- (function(x){t(x) %*% x})(matrix(rnorm(perm_size*perm_size), nrow=perm_size)) # the real covariance matrix, that we want to estimate number_of_observations <- 50 Z <- withr::with_seed(2022,     code = MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) )  dim(Z) #> [1] 50 70 number_of_observations <- nrow(Z) # 50 perm_size <- ncol(Z) # 70 S <- cov(Z) # Assume we have to estimate the mean g <- gips(S, number_of_observations)  g_map <- find_MAP(g, max_iter = 50, optimizer = \"Metropolis_Hastings\") #> ============================================================================== plot(g_map, type = \"both\") g_map2 <- find_MAP(g_map, max_iter = 100, optimizer = \"continue\") #> =============================================================================== plot(g_map2, type = \"both\")"},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"additional-parameters","dir":"Articles","previous_headings":"","what":"Additional parameters","title":"Optimizers","text":"find_MAP() function two additional parameters: show_progress_bar save_all_perms, can set TRUE FALSE. show_progress_bar = TRUE, gips print “=” characters console optimization. Keep mind user sets return_probabilities = TRUE, second progress bar indicate calculation probabilities optimization. save_all_perms = TRUE save visited permutations outputted object, significantly increases required RAM. instance, \\(p=150\\) max_perm = 150000, needed 400 MB store , whereas save_all_perms = FALSE required 2 MB. However, save_all_perms = TRUE necessary return_probabilities = TRUE complex path analysis.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"discussion","dir":"Articles","previous_headings":"","what":"Discussion","title":"Optimizers","text":"considering implementing First approach [1] future well. approach, Markov chain travels along cyclic groups rather permutations. encourage everyone leave comment available potential new optimizers ISSUE#21. , one can also find implemented optimizers yet added gips.","code":""},{"path":"https://przechoj.github.io/gips/articles/Optimizers.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Optimizers","text":"[1] Piotr Graczyk, Hideyuki Ishi, Bartosz Kołodziejek, Hélène Massam. “Model selection space Gaussian models invariant symmetry.” Annals Statistics, 50(3) 1747-1774 June 2022. arXiv link; DOI: 10.1214/22-AOS2174","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"theory-the-gips-is-based-on","dir":"Articles","previous_headings":"","what":"Theory the gips is based on","title":"Theory","text":"package based article [1]. math behind package precisely demonstrated, theorems proven. vignette, like give gentle introduction. want point important results work user’s point view. also show examples results gips package. mentioned abstract, outline paper “derive distribution maximum likelihood estimate covariance parameter \\(\\Sigma\\) (…)” “perform Bayesian model selection class complete Gaussian models invariant action subgroup symmetric group (…)”. ideas implemented gips package.","code":"library(gips)"},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"basic-definitions","dir":"Articles","previous_headings":"","what":"Basic definitions","title":"Theory","text":"Let \\(V=\\{1,\\ldots,p\\}\\) finite index set, every \\(\\\\{1, \\dots, n\\}\\), \\(Z^{()}=(Z_1^{()},\\ldots, Z_p^{()})^\\top\\) multivariate random variable following centered Gaussian model \\(\\mathrm{N}_p(0,\\Sigma)\\), let \\(Z^{(1)},\\ldots, Z^{(n)}\\) ..d. (independent identically distributed) sample distribution. Name whole sample \\(Z = (Z^{(1)},\\ldots, Z^{(n)})\\). Let \\(\\mathfrak{S}_p\\) denote symmetric group \\(V\\), , set permutations \\(\\{1,\\ldots,p\\}\\) function composition group operation. Let \\(\\Gamma\\) arbitrary subgroup \\(\\mathfrak{S}_p\\). model \\(\\mathrm{N}_p(0,\\Sigma)\\) said invariant action \\(\\Gamma\\) \\(g\\\\Gamma\\), \\(g\\cdot\\Sigma\\cdot g^\\top=\\Sigma\\) (, identify permutation \\(g\\) permutation matrix). subgroup \\(\\Gamma \\subset \\mathfrak{S}_p\\), define colored space, .e. space symmetric matrices invariant \\(\\Gamma\\), \\[\\mathcal{Z}_{\\Gamma} := \\{S \\\\mathrm{Sym}(p;\\mathbb{R})\\colon S_{,j} = S_{\\sigma(),\\sigma(j)} \\text{ }\\sigma \\\\Gamma\\mbox{ },j\\V\\},\\] colored cone positive definite matrices valued \\(\\mathcal{Z}_{\\Gamma}\\), \\[\\mathcal{P}_{\\Gamma} := \\mathcal{Z}_{\\Gamma} \\cap \\mathrm{Sym}^+(p;\\mathbb{R}).\\]","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"block-decomposition---1-theorem-1","dir":"Articles","previous_headings":"","what":"Block Decomposition - [1], Theorem 1","title":"Theory","text":"main theoretical result theory (Theorem 1 [1]) states given permutation subgroup \\(\\Gamma\\) exists orthogonal matrix \\(U_\\Gamma\\) symmetric matrices \\(S\\\\mathcal{Z}_\\Gamma\\) can transformed block-diagonal form. exact form blocks depends -called structure constants \\((k_i,d_i,r_i)_{=1}^L\\). worth pointing constants \\(k = d\\) cyclic group \\(\\Gamma = \\left<\\sigma\\right>\\) gips searches within cyclic subgroups .","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"examples","dir":"Articles","previous_headings":"Block Decomposition - [1], Theorem 1","what":"Examples","title":"Theory","text":"S symmetric matrix invariant group \\(\\Gamma = \\left<(1,2,3,4,5,6)\\right>\\).  transformed matrix block-diagonal form [1], Theorem 1. Blank entries -block entries equal 0. Notice , example, [2,3] blank regardless 0. part block-diagonal form happens value 0. result rounded 5th place decimal hide inaccuracies floating point arithmetic. Let’s see example:  Now, S symmetric matrix invariant group \\(\\Gamma = \\left<(1,2,3)(4,5,6)\\right>\\).  , result accordance [1], Theorem 1. Notice zeros block_decomposition: \\[\\forall_{\\\\{1,2\\},j\\\\{3,4,5,6\\}}\\text{block_decomposition}[,j] = 0\\]","code":"p <- 6 S <- matrix(c(1.1,0.9,0.8,0.7,0.8,0.9,               0.9,1.1,0.9,0.8,0.7,0.8,               0.8,0.9,1.1,0.9,0.8,0.7,               0.7,0.8,0.9,1.1,0.9,0.8,               0.8,0.7,0.8,0.9,1.1,0.9,               0.9,0.8,0.7,0.8,0.9,1.1), nrow = p) g_perm <- gips_perm(\"(1,2,3,4,5,6)\", p) U_Gamma <- prepare_orthogonal_matrix(g_perm)  block_decomposition <- t(U_Gamma) %*% S %*% U_Gamma round(block_decomposition, 5) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]  5.2  0.0  0.0  0.0  0.0  0.0 #> [2,]  0.0  0.5  0.0  0.0  0.0  0.0 #> [3,]  0.0  0.0  0.5  0.0  0.0  0.0 #> [4,]  0.0  0.0  0.0  0.1  0.0  0.0 #> [5,]  0.0  0.0  0.0  0.0  0.1  0.0 #> [6,]  0.0  0.0  0.0  0.0  0.0  0.2 p <- 6 S <- matrix(c(1.2,0.9,0.9,0.4,0.2,0.1,               0.9,1.2,0.9,0.1,0.4,0.2,               0.9,0.9,1.2,0.2,0.1,0.4,               0.4,0.1,0.2,1.2,0.9,0.9,               0.2,0.4,0.1,0.9,1.2,0.9,               0.1,0.2,0.4,0.9,0.9,1.2), nrow = p) g_perm <- gips_perm(\"(1,2,3)(4,5,6)\", p) U_Gamma <- prepare_orthogonal_matrix(g_perm)  block_decomposition <- t(U_Gamma) %*% S %*% U_Gamma round(block_decomposition, 5) #>      [,1] [,2]   [,3]    [,4]    [,5]   [,6] #> [1,]  3.0  0.7 0.0000  0.0000  0.0000 0.0000 #> [2,]  0.7  3.0 0.0000  0.0000  0.0000 0.0000 #> [3,]  0.0  0.0 0.3000  0.0000  0.2500 0.0866 #> [4,]  0.0  0.0 0.0000  0.3000 -0.0866 0.2500 #> [5,]  0.0  0.0 0.2500 -0.0866  0.3000 0.0000 #> [6,]  0.0  0.0 0.0866  0.2500  0.0000 0.3000"},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"project-matrix---1-eq--6","dir":"Articles","previous_headings":"","what":"Project Matrix - [1, Eq. (6)]","title":"Theory","text":"One can also take symmetric square matrix S find orthogonal projection \\(\\mathcal{Z}_{\\Gamma}\\), space matrices invariant given permutation: \\[\\pi_\\Gamma(S) := \\frac{1}{|\\Gamma|}\\sum_{\\sigma\\\\Gamma}\\sigma\\cdot S\\cdot\\sigma^\\top\\] projected matrix element cone \\(\\pi_\\Gamma(S)\\\\mathcal{Z}_{\\Gamma}\\), means: \\[\\forall_{,j\\\\{1,\\ \\dots,\\ p\\}} \\pi_\\Gamma(S)[,j] = \\pi_\\Gamma(S)[\\sigma(),\\sigma(j)] \\text{ }\\sigma\\\\Gamma\\] identical elements.","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"trivial-case","dir":"Articles","previous_headings":"Project Matrix - [1, Eq. (6)]","what":"Trivial case","title":"Theory","text":"Note \\(\\Gamma = \\{\\text{id}\\} = \\{(1)(2)\\dots(p)\\}\\) \\(\\pi_{\\{\\text{id}\\}}(S) = S\\). , additional assumptions made; thus standard covariance estimator best can .","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"example","dir":"Articles","previous_headings":"Project Matrix - [1, Eq. (6)]","what":"Example","title":"Theory","text":"Let S symmetric square matrix:  One can project matrix, example, \\(\\Gamma = \\left<(1,2)(3,4,5,6)\\right>\\):  Notice S_projected matrix, identical elements according equation beginning section. example, S_projected[1,1] = S_projected[2,2].","code":"round(S, 2) #>        [,1]   [,2]   [,3]   [,4]   [,5]   [,6] #> [1,] 137.51 -16.21  10.03   0.16 -24.35 -17.42 #> [2,] -16.21  34.08 -10.62  15.93  12.23  -2.74 #> [3,]  10.03 -10.62  35.47   3.10  -3.81  -9.60 #> [4,]   0.16  15.93   3.10  26.74   7.71 -13.51 #> [5,] -24.35  12.23  -3.81   7.71  26.00  -7.24 #> [6,] -17.42  -2.74  -9.60 -13.51  -7.24  16.77 S_projected <- project_matrix(S, perm = \"(1,2)(3,4,5,6)\") round(S_projected, 2) #>        [,1]   [,2]  [,3]  [,4]  [,5]  [,6] #> [1,]  85.80 -16.21 -0.28 -3.91 -0.28 -3.91 #> [2,] -16.21  85.80 -3.91 -0.28 -3.91 -0.28 #> [3,]  -0.28  -3.91 26.25 -1.51 -8.66 -1.51 #> [4,]  -3.91  -0.28 -1.51 26.25 -1.51 -8.66 #> [5,]  -0.28  -3.91 -8.66 -1.51 26.25 -1.51 #> [6,]  -3.91  -0.28 -1.51 -8.66 -1.51 26.25"},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"c_sigma-and-n0","dir":"Articles","previous_headings":"Project Matrix - [1, Eq. (6)]","what":"\\(C_\\sigma\\) and n0","title":"Theory","text":"well-known fact without additional assumptions, Maximum Likelihood Estimator (MLE) covariance matrix Gaussian model exists \\(n \\ge p\\). However, additional assumption added covariance matrix invariant permutation \\(\\sigma\\), sample size \\(n\\) required MLE exist lower \\(p\\). equal number cycles, denoted hereafter \\(C_\\sigma\\). example, permutation \\(\\sigma = (1,2,3,4,5,6)\\) discovered find_MAP() function, single cycle \\(C_\\sigma = 1\\). Therefore single observation enough estimate covariance matrix project_matrix(). permutation \\(\\sigma = (1,2)(3,4,5,6)\\) discovered, \\(C_\\sigma = 2\\) 2 observations enough. get \\(C_\\sigma\\) number gips, one can call summary() appropriate gips object: called n0 \\(C_\\sigma\\), increased 1 mean estimated:","code":"g1 <- gips(S, n, perm = \"(1,2,3,4,5,6)\", was_mean_estimated = FALSE) summary(g1)$n0 #> [1] 1 g2 <- gips(S, n, perm = \"(1,2)(3,4,5,6)\", was_mean_estimated = FALSE) summary(g2)$n0 #> [1] 2 S <- cov(Z) g1 <- gips(S, n, perm = \"(1,2,3,4,5,6)\", was_mean_estimated = TRUE) summary(g1)$n0 #> [1] 2 g2 <- gips(S, n, perm = \"(1,2)(3,4,5,6)\", was_mean_estimated = TRUE) summary(g2)$n0 #> [1] 3"},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"bayesian-model-selection","dir":"Articles","previous_headings":"","what":"Bayesian model selection","title":"Theory","text":"one data matrix Z, one like know hidden structure dependencies features. Luckily, paper demonstrates way find .","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"general-workflow","dir":"Articles","previous_headings":"Bayesian model selection","what":"General workflow","title":"Theory","text":"Choose prior distribution \\(\\Gamma\\) \\(\\Sigma\\). Calculate posteriori distribution (normalizing constant) formula [1], (30). Use Metropolis-Hastings algorithm find permutation biggest value posterior probability \\(\\mathbb{P}(\\Gamma|Z)\\).","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"details-on-the-prior-distribution","dir":"Articles","previous_headings":"Bayesian model selection","what":"Details on the prior distribution","title":"Theory","text":"considered prior distribution \\(\\Gamma\\) \\(K=\\Sigma^{-1}\\): \\(\\Gamma\\) uniformly distributed set cyclic subgroups \\(\\mathfrak{S}_p\\). \\(K\\) given \\(\\Gamma\\) follows Diaconis-Ylvisaker conjugate prior distribution parameters \\(\\delta\\) (real number, \\(\\delta > 2\\)) \\(D\\) (symmetric, positive definite square matrix size S), see [1], Sec. 3.4. Footnote: Actually cases smaller (still positive) values \\(\\delta\\) parameter theoretically correct. Refer [1].","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"gips-technical-details","dir":"Articles","previous_headings":"Bayesian model selection","what":"gips technical details","title":"Theory","text":"gips, \\(\\delta\\) named delta, \\(D\\) named D_matrix. default, set \\(3\\) diag(p), respectively. However, worth running procedure several parameters D_matrix form \\(C\\cdot diag(p)\\) positive constant \\(C\\). Large \\(C\\) (compared data) favors small groups. One can calculate logarithm formula (30) function log_posteriori_of_gips().","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"interpretation","dir":"Articles","previous_headings":"Bayesian model selection","what":"Interpretation","title":"Theory","text":"assumptions met, formula (30) puts number permutation’s cyclic group. bigger value, likely data drawn model. one finds permutations group \\(c_{\\text{max}}\\) maximizes (30), \\[c_{\\text{map}} = \\operatorname{arg\\,max}_{c\\\\mathfrak{S}_p} \\mathbb{P}\\left(\\Gamma=c|Z^{(1)},\\ldots,Z^{(n)}\\right)\\] one can reasonably assume data \\(Z\\) drawn model \\[\\mathrm{N}_p(0,\\pi_{c_{\\text{map}}}(S))\\] \\(S = \\frac{1}{n} \\sum_{=1}^n Z^{()}\\cdot {Z^{()}}^\\top\\) case, call \\(c_{\\text{map}}\\) Maximum Posteri (MAP).","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"finding-the-map-estimator","dir":"Articles","previous_headings":"Bayesian model selection","what":"Finding the MAP Estimator","title":"Theory","text":"space permutations enormous bigger \\(p\\) (experiments, \\(p\\ge 9\\) big). big space, reasonable estimate MAP calculate precisely. Metropolis-Hastings algorithm suggested authors [1] natural way . see discussion options available gips, see vignette(\"Optimizers\", package=\"gips\") pkgdown page.","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"example-1","dir":"Articles","previous_headings":"Bayesian model selection","what":"Example","title":"Theory","text":"Let’s say data, Z. \\(4\\) observations, dimension \\(p=6\\). Let’s assume Z drawn normal distribution mean \\((0,0,0,0,0,0)\\). want estimate covariance matrix:  see posterior probability [1,(30)] biggest value permutation \\((1,2,3,4,5,6)\\). 500 times bigger trivial \\(\\text{id} = (1)(2)\\ldots(p)\\) permutation. interpret assumptions (centered Gaussian), 500 times reasonable assume data Z drawn model \\(\\mathrm{N}_p(0,\\text{S_projected})\\) model \\(\\mathrm{N}_p(0,\\text{S})\\).","code":"# Prepare model, multivariate normal distribution p <- 6 number_of_observations <- 4 mu <- numeric(p) sigma_matrix <- matrix(   data = c(     1.05, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.05, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.05, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.05, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.05, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.05   ),   nrow = p, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6)  # Generate example data from a model: Z <- withr::with_seed(2022,   code = MASS::mvrnorm(number_of_observations,                        mu = mu, Sigma = sigma_matrix) ) # End of prepare model dim(Z) #> [1] 4 6 number_of_observations <- nrow(Z) # 4 p <- ncol(Z) # 6  # Calculate the covariance matrix from the data (assume the mean is 0): S <- (t(Z) %*% Z) / number_of_observations  # Make the gips object out of data: g <- gips(S, number_of_observations, was_mean_estimated = FALSE)  g_map <- find_MAP(g, optimizer = \"brute_force\") #> ================================================================================ print(g_map) #> The permutation (1,2,3,4,5,6) #>  - was found after 720 log_posteriori calculations #>  - is 513.723 times more likely than the starting, () permutation.  S_projected <- project_matrix(S, g_map[[1]])"},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"information-criterion---aic-and-bic","dir":"Articles","previous_headings":"","what":"Information Criterion - AIC and BIC","title":"Theory","text":"One may interested Akaike’s Information Criterion (AIC) Schwarz’s Bayesian Information Criterion (BIC) found model. defined follows: \\[\\log L\\left(\\hat{K}; Z^{(1)},\\ldots,Z^{(n)}\\right) = \\sum_{=1}^n \\left(- \\frac{p}{2}\\log (2\\pi) - \\frac{1}{2}\\log\\left( \\det\\left( \\hat{K}\\right)\\right) - \\frac12 {Z^{()}}^\\top \\hat{K}^{-1} Z^{()}\\right)= \\] \\[- \\frac{np}{2}\\log (2\\pi) - \\frac{n}{2}\\log\\left( \\det\\left( \\hat{K}\\right)\\right) - \\frac{n}2\\mathrm{tr}(\\hat{K}^{-1} S),\\] \\(S = \\frac{1}{n} \\sum_{=1}^n Z^{()}\\cdot {Z^{()}}^\\top\\). , every \\(c\\) \\(\\mathrm{tr}(\\pi_{c}(S)^{-1} \\cdot S) = p\\), : \\[\\log L\\left(\\pi_{c}(S); Z^{(1)},\\ldots,Z^{(n)}\\right) = - \\frac{np}{2}\\log (2\\pi) - \\frac{n}{2}\\log\\left( \\det\\left( \\pi_{c}(S)\\right)\\right) - \\frac{np}2\\] can calculated logLik.gips(). AIC BIC defined : \\[AIC = 2 \\cdot (\\dim M) -2 \\log L(\\hat K)\\] \\[BIC = (\\log n) \\cdot (\\dim M) -2 \\log L(\\hat K)\\] interpretation follows: smaller criterion, better model. can calculated AIC.gips() BIC.gips().","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"estimated-mean","dir":"Articles","previous_headings":"Information Criterion - AIC and BIC","what":"Estimated mean","title":"Theory","text":"mean estimated, \\(S = \\frac{1}{n-1} \\sum_{=1}^n (Z^{()} - \\bar{Z})\\cdot ({Z^{()} - \\bar{Z})}^\\top\\), \\(\\bar{Z} = \\frac{1}{n} \\sum_{=1}^n Z^{()}\\). : \\[\\log L_{estimated\\ mean}\\left(\\pi_{c}(S); Z^{(1)},\\ldots,Z^{(n)}\\right) = - \\frac{(n-1)\\cdot p}{2}\\log (2\\pi) - \\frac{(n-1)}{2}\\log\\left( \\det\\left( \\pi_{c}(S)\\right)\\right) - \\frac{(n-1)\\cdot p}2\\] definitions AIC BIC stay : \\[AIC = 2 \\cdot (\\dim M) -2 \\log L_{estimated\\ mean}(\\hat K)\\] \\[BIC = (\\log n) \\cdot (\\dim M) -2 \\log L_{estimated\\ mean}(\\hat K)\\]","code":""},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"example-2","dir":"Articles","previous_headings":"Information Criterion - AIC and BIC","what":"Example","title":"Theory","text":"Consider example similar one Bayesian model selection section: Let’s say data, Z. \\(7\\) observations, dimension \\(p=6\\). Let’s assume Z drawn normal distribution mean \\((0,0,0,0,0,0)\\). want estimate covariance matrix: consider g_map better model terms AIC BIC.","code":"# Prepare model, multivariate normal distribution p <- 6 number_of_observations <- 7 mu <- numeric(p) sigma_matrix <- matrix(   data = c(     1.05, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.05, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.05, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.05, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.05, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.05   ),   nrow = p, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6)  # Generate example data from a model: Z <- withr::with_seed(2022,   code = MASS::mvrnorm(number_of_observations,                        mu = mu, Sigma = sigma_matrix) ) # End of prepare model dim(Z) #> [1] 7 6 number_of_observations <- nrow(Z) # 7 p <- ncol(Z) # 6  S <- (t(Z) %*% Z) / number_of_observations  g <- gips(S, number_of_observations, was_mean_estimated = FALSE) g_map <- find_MAP(g, optimizer = \"brute_force\") #> ================================================================================ AIC(g) #> [1] 64.19906 AIC(g_map) # this is smaller, so this is better #> [1] 62.99751  BIC(g) #> [1] 63.06318 BIC(g_map) # this is smaller, so this is better #> [1] 62.78115"},{"path":"https://przechoj.github.io/gips/articles/Theory.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Theory","text":"[1] Piotr Graczyk, Hideyuki Ishi, Bartosz Kołodziejek, Hélène Massam. “Model selection space Gaussian models invariant symmetry.” Annals Statistics, 50(3) 1747-1774 June 2022. arXiv link; DOI: 10.1214/22-AOS2174","code":""},{"path":"https://przechoj.github.io/gips/articles/gips.html","id":"the-problem","dir":"Articles","previous_headings":"","what":"The problem","title":"gips","text":"Quite often, little data perform valid inference. Consider situation multivariate Gaussian distribution, observations compared number variables. example, ’s case graphical models used biology medicine. setting, usual way finding covariance matrix (maximum likelihood method) isn’t statistically applicable. now?","code":""},{"path":"https://przechoj.github.io/gips/articles/gips.html","id":"invariance-by-permutation","dir":"Articles","previous_headings":"","what":"Invariance by permutation","title":"gips","text":"cases, interchange variables vector change distribution. multivariate Gaussian case, mean variances covariances respective variables. instance, following covariance matrix, variables X1 X3 interchangeable, meaning vectors (X1, X2, X3) (X3, X2, X1) distribution.  Now, can state interchangeability property terms permutations. case, distribution (X1, X2, X3) invariant permutation (\\(1\\mapsto3\\), \\(3\\mapsto1\\)), cyclic form \\((1,3)(2)\\). equivalent saying swapping first third row swapping first third columns covariance matrix results matrix. say covariance matrix invariant permutation. course, samples collected real world, perfect equalities observed. Still, respective values (poorly) estimated covariance matrix close, adopting particular assumption invariance permutation reasonable step.","code":""},{"path":"https://przechoj.github.io/gips/articles/gips.html","id":"package-gips","dir":"Articles","previous_headings":"","what":"Package gips","title":"gips","text":"propose creating set constraints covariance matrix use maximum likelihood method. constraint consider - none - invariance permutation symmetry. package provides way find reasonable permutation used constraint covariance matrix estimation. case, reasonable means maximizing Bayesian posterior distribution using Wishart-like distribution symmetric, positive definite matrices prior. idea, exact formulas, algorithm sketch explored another vignette can accessed vignette(\"Theory\", package=\"gips\") pkgdown page.","code":""},{"path":"https://przechoj.github.io/gips/articles/gips.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"gips","text":"Note rank S matrix 3, despite number_of_observations 4. cov() estimated mean every column compute S. want find reasonable additional assumptions S make easier estimate.  Looking plot, one can see similarities columns 3, 4, 5. similar variance covariance . 3 5 similar covariance columns 1 2. However, 4 far . Let’s see gips find relationship:  gips decided \\((3,4,5)\\) reasonable assumption. Let’s see much better : assumption nineteen times believable making assumption. Let’s examine reasonable possible assumptions: see assumption \\((3,4,5)\\) likely \\(20.2\\%\\) posterior probability. permutations way less likely. Remember n0 still big data. example assumptions transpositions (like \\((3,5)\\)) n0 \\(= 4\\), insufficient us estimate covariance correctly. assumption \\((3,4,5)\\) just right: Now, estimated covariance matrix full rank (5).","code":"perm_size <- 5 number_of_observations <- 4 mu <- runif(perm_size, -10, 10) # Assume we don't know the mean sigma_matrix <- matrix(c(8,   3,   1.9, 1.9, 1.9,                          3,   2.5, 0.3, 0.3, 0.3,                          1.9, 0.3, 1,   0.8, 0.8,                          1.9, 0.3, 0.8, 1,   0.8,                          1.9, 0.3, 0.8, 0.8, 1), ncol = 5) # sigma_matrix is a matrix invariant under permutation (3,4,5) toy_example_data <- withr::with_seed(2022,     code = MASS::mvrnorm(number_of_observations,                          mu = mu, Sigma = sigma_matrix) ) library(gips)  toy_example_data #>            [,1]      [,2]       [,3]       [,4]      [,5] #> [1,]  5.2343266 10.282703  -8.918413  1.1077389 -4.280460 #> [2,] -0.7625932  5.465697  -8.810164  0.8281707 -3.856117 #> [3,]  0.2731197  7.412801  -9.159804 -0.2730336 -5.445999 #> [4,] -1.6661171  8.671801 -10.053982 -1.0872274 -6.243978  dim(toy_example_data) #> [1] 4 5 number_of_observations <- nrow(toy_example_data) # 4 perm_size <- ncol(toy_example_data) # 5  S <- cov(toy_example_data)  sum(eigen(S)$values > 0.00000001) #> [1] 3 g <- gips(S = S, number_of_observations = nrow(toy_example_data))  plot(g, type = \"heatmap\") g_map <- find_MAP(g, optimizer = \"brute_force\",                   return_probabilities = TRUE, save_all_perms = TRUE) #> ================================================================================ #> ================================================================================  plot(g_map, type = \"heatmap\") g_map #> The permutation (3,4,5) #>  - was found after 120 log_posteriori calculations #>  - is 19.055 times more likely than the starting, () permutation. get_probabilities_from_gips(g_map) #>            ()         (4,5)         (3,4)       (3,4,5)         (3,5)  #> 0.01061282927 0.06171956464 0.04211999314 0.20223220920 0.04567419862  #>         (2,3)    (2,3)(4,5)       (2,3,4)     (2,3,4,5)     (2,3,5,4)  #> 0.00581023111 0.01783654869 0.01551801497 0.05682939187 0.07903711778  #>       (2,3,5)         (2,4)       (2,4,5)    (2,4)(3,5)     (2,4,3,5)  #> 0.04483174508 0.00632844959 0.09831655373 0.01384671335 0.05703725463  #>         (2,5)    (2,5)(3,4)         (1,2)    (1,2)(4,5)    (1,2)(3,4)  #> 0.01796890911 0.01890647384 0.00445029902 0.01010029703 0.01112908332  #>  (1,2)(3,4,5)    (1,2)(3,5)       (1,2,3)  (1,2,3)(4,5)     (1,2,3,4)  #> 0.05643114895 0.01048091275 0.00125289503 0.00577963435 0.00081399784  #>   (1,2,3,4,5)   (1,2,3,5,4)     (1,2,3,5)     (1,2,4,3)   (1,2,4,5,3)  #> 0.00425749682 0.00735807992 0.00240359629 0.00028403009 0.00341026916  #>       (1,2,4)     (1,2,4,5)  (1,2,4)(3,5)   (1,2,4,3,5)   (1,2,5,4,3)  #> 0.00233411313 0.00522571301 0.00758134816 0.00367149151 0.00257878934  #>     (1,2,5,3)     (1,2,5,4)       (1,2,5)   (1,2,5,3,4)  (1,2,5)(3,4)  #> 0.00081794919 0.00530911969 0.00575507966 0.00370416241 0.01455544007  #>         (1,3)    (1,3)(4,5)       (1,3,4)     (1,3,4,5)     (1,3,5,4)  #> 0.00021825685 0.00061927155 0.00016548479 0.00005041919 0.00005399096  #>       (1,3,5)    (1,3)(2,4)  (1,3)(2,4,5)     (1,3,2,4)  (1,3,5)(2,4)  #> 0.00024122684 0.00003053547 0.00438962100 0.00049700802 0.00023070395  #>    (1,3)(2,5)     (1,3,2,5)  (1,3,4)(2,5)         (1,4)       (1,4,5)  #> 0.00011037285 0.00159335260 0.00052851925 0.00055295545 0.00042223214  #>    (1,4)(3,5)     (1,4,3,5)    (1,4)(2,3)  (1,4,5)(2,3)  (1,4)(2,3,5)  #> 0.00089431399 0.00005700363 0.00022150996 0.00020077919 0.00934379767  #>    (1,4)(2,5)     (1,4,2,5)         (1,5)    (1,5)(3,4)    (1,5)(2,3)  #> 0.00119644677 0.00672864070 0.00082845248 0.00135409444 0.00047108119  #>  (1,5)(2,3,4)    (1,5)(2,4)  #> 0.00413882960 0.00054995409 S_projected <- project_matrix(S, g_map[[1]]) S_projected #>          [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 9.486870  4.2433055  1.5435370  1.5435370  1.5435370 #> [2,] 4.243306  4.1408570 -0.3208554 -0.3208554 -0.3208554 #> [3,] 1.543537 -0.3208554  0.8454335  0.7183971  0.7183971 #> [4,] 1.543537 -0.3208554  0.7183971  0.8454335  0.7183971 #> [5,] 1.543537 -0.3208554  0.7183971  0.7183971  0.8454335 sum(eigen(S_projected)$values > 0.00000001) #> [1] 5"},{"path":"https://przechoj.github.io/gips/articles/gips.html","id":"practical-example","dir":"Articles","previous_headings":"","what":"Practical example","title":"gips","text":"Let’s examine 12 books’ thick, height, breadth data:  can see similarities columns 2 3, representing book’s height breadth. particular, covariance [1,2] similar [1,3], variance [2] similar variance [3]. surprising, given interpretation data. see search restrictive find permutation. weaken restrictions changing D_matrix parameter. find_MAP found symmetry represented permutation (2,3). result depends two input parameters, delta D_matrix. default set 3 diag(p), respectively. method scale-invariant therefore recommend run gips different values D_matrix (typically, form D_coef * diag(p), D_coef \\(\\\\mathbb{R}^+\\)).","code":"library(gips)  Z <- DAAG::oddbooks[,c(1,2,3)]  number_of_observations <- nrow(Z) # 12 p <- ncol(Z) # 3  S <- cov(Z) S #>             thick    height   breadth #> thick    72.69697 -40.33485 -31.74242 #> height  -40.33485  25.36992  20.58576 #> breadth -31.74242  20.58576  17.18424 g <- gips(S, number_of_observations, D_matrix=diag(p)) # the default D_matrix my_add_text(plot(g, type = \"heatmap\")) g_map <- find_MAP(g, optimizer = \"brute_force\",                   return_probabilities = TRUE, save_all_perms = TRUE) #> ================================================================================ #> ================================================================================  g_map #> The permutation () #>  - was found after 6 log_posteriori calculations #>  - is 1 times more likely than the starting, () permutation. get_probabilities_from_gips(g_map) #>                   ()                (2,3)                (1,2)  #> 0.917699644399123216 0.082300333638115772 0.000000000064309861  #>              (1,2,3)                (1,3)  #> 0.000000021892918704 0.000000000005532453 D_coef <- 0.05 g <- gips(S, number_of_observations, D_matrix = D_coef*diag(p)) g_map <- find_MAP(g, optimizer = \"brute_force\",                   return_probabilities = TRUE, save_all_perms = TRUE) #> ================================================================================ #> ================================================================================  g_map #> The permutation (2,3) #>  - was found after 6 log_posteriori calculations #>  - is 3.58 times more likely than the starting, () permutation. get_probabilities_from_gips(g_map) #>                  ()               (2,3)               (1,2)             (1,2,3)  #> 0.21834865211409399 0.78161461578574387 0.00000000027813589 0.00003673179839076  #>               (1,3)  #> 0.00000000002363545"},{"path":"https://przechoj.github.io/gips/articles/gips.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"gips","text":"learn available optimizers find_MAP() use , see vignette(\"Optimizers\", package=\"gips\") pkgdown page. learn math theory behind gips package, see vignette(\"Theory\", package=\"gips\") pkgdown page.","code":""},{"path":"https://przechoj.github.io/gips/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Przemysław Chojecki. Author, maintainer. Paweł Morgen. Author. Bartosz Kołodziejek. Author.","code":""},{"path":"https://przechoj.github.io/gips/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chojecki AP, Morgen P, Kołodziejek B (2023). gips: Gaussian Model Invariant Permutation Symmetry. https://github.com/PrzeChoj/gips, https://przechoj.github.io/gips/.","code":"@Manual{,   title = {gips: Gaussian Model Invariant by Permutation Symmetry},   author = {Adam Przemysław Chojecki and Paweł Morgen and Bartosz Kołodziejek},   year = {2023},   note = {https://github.com/PrzeChoj/gips, https://przechoj.github.io/gips/}, }"},{"path":"https://przechoj.github.io/gips/index.html","id":"gips-","dir":"","previous_headings":"","what":"Gaussian Model Invariant by Permutation Symmetry","title":"Gaussian Model Invariant by Permutation Symmetry","text":"gips - Gaussian model Invariant Permutation Symmetry gips R package looks permutation symmetries multivariate Gaussian sample. symmetries reduce free parameters unknown covariance matrix. especially useful number variables substantially larger number observations.","code":""},{"path":"https://przechoj.github.io/gips/index.html","id":"gips-will-help-you-with-two-things","dir":"","previous_headings":"","what":"gips will help you with two things:","title":"Gaussian Model Invariant by Permutation Symmetry","text":"Finding hidden symmetries variables. gips can used exploratory tool searching space permutation symmetries Gaussian vector. Useful Exploratory Data Analysis (EDA). Covariance estimation. Maximum Likelihood Estimator (MLE) covariance matrix known exist number variables less equal number observations. Additional knowledge symmetries significantly weakens requirement. Moreover, reduction model dimension brings advantage terms precision covariance estimation.","code":""},{"path":"https://przechoj.github.io/gips/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gaussian Model Invariant by Permutation Symmetry","text":"CRAN: GitHub:","code":"# Install the released version from CRAN: install.packages(\"gips\") # Install the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"PrzeChoj/gips\")"},{"path":[]},{"path":"https://przechoj.github.io/gips/index.html","id":"example-1---eda","dir":"","previous_headings":"Examples","what":"Example 1 - EDA","title":"Gaussian Model Invariant by Permutation Symmetry","text":"Assume data, want understand structure: Assume data Z normally distributed.  Remember, analyze covariance matrix. can see strong similarities covariances columns 3 4. similar variances (S[3,3] ≈ S[4,4]), covariances rest columns alike (S[1,3] ≈ S[1,4] S[2,3] ≈ S[2,4]). Note variances columns 1 2 also similar, covariances columns (3 4) alike. Let’s see find_MAP() find relationship: find_MAP found relationship (3,4). opinion, variances [3,3] [4,4] close reasonable consider equal. Similarly, covariances [1,3] [1,4]; just covariances [2,3] [3,4], also considered equal:  S_projected matrix can now interpreted stable covariance matrix estimator. can also interpret data suggesting , example, covariance “number deaths Aspirin” “number people treated *” matter “*” represents placebo Aspirin.","code":"library(gips)  Z <- HSAUR::aspirin  # Renumber the columns for better readability: Z[,c(2,3)] <- Z[,c(3,2)] dim(Z) #> [1] 7 4 number_of_observations <- nrow(Z) # 7 perm_size <- ncol(Z) # 4  S <- cov(Z) round(S) #>         [,1]    [,2]    [,3]    [,4] #> [1,]  381405  345527 1864563 1813725 #> [2,]  345527  316411 1711853 1663065 #> [3,] 1864563 1711853 9305049 8991343 #> [4,] 1813725 1663065 8991343 8755176  g <- gips(S, number_of_observations) my_add_text(plot(g, type = \"heatmap\")) g_MAP <- find_MAP(g, optimizer = \"brute_force\") #> ================================================================================  g_MAP #> The permutation (3,4) #>  - was found after 24 log_posteriori calculations #>  - is 1.062e+14 times more likely than the starting, () permutation. S_projected <- project_matrix(S, g_MAP[[1]]) round(S_projected) #>         [,1]    [,2]    [,3]    [,4] #> [1,]  381405  345527 1839144 1839144 #> [2,]  345527  316411 1687459 1687459 #> [3,] 1839144 1687459 9030113 8991343 #> [4,] 1839144 1687459 8991343 9030113  my_add_text(plot(g_MAP, type = \"heatmap\"))"},{"path":"https://przechoj.github.io/gips/index.html","id":"example-2---modeling","dir":"","previous_headings":"Examples","what":"Example 2 - modeling","title":"Gaussian Model Invariant by Permutation Symmetry","text":"First, construct data example: Suppose know true covariance matrix Σ want estimate . use standard MLE exists (4 < 6, n < p). assume generated normal distribution mean 0. Make gips object data: Find Maximum Posteriori Estimator permutation. Space small (6! = 720), reasonable browse whole : see found permutation hundreds times likely making additional assumption. means additional assumptions justified. , see number observations (4) bigger equal n0 = 1, can estimate covariance matrix Maximum Likelihood estimator:  see gips found data’s structure, estimate covariance matrix huge accuracy small amount data additional reasonable assumptions. Note rank S matrix 4, rank S_projected matrix 6 (full rank).","code":"# Prepare model, multivariate normal distribution perm_size <- 6 mu <- numeric(perm_size)   sigma_matrix <- matrix(   data = c(     1.1, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.1, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.1, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.1, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.1, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.1   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6)   # Generate example data from a model: Z <- withr::with_seed(2022,     code = MASS::mvrnorm(4, mu = mu, Sigma = sigma_matrix) ) # End of prepare model library(gips) dim(Z) #> [1] 4 6 number_of_observations <- nrow(Z) # 4 perm_size <- ncol(Z) # 6  # Calculate the covariance matrix from the data: S <- (t(Z) %*% Z) / number_of_observations g <- gips(S, number_of_observations, was_mean_estimated = FALSE) g_map <- find_MAP(g, optimizer = \"brute_force\") #> ================================================================================  g_map #> The permutation (1,2,3,4,5,6) #>  - was found after 720 log_posteriori calculations #>  - is 504.049 times more likely than the starting, () permutation. summary(g_map)$n0 #> [1] 1 summary(g_map)$n0 <= number_of_observations # 1 <= 4 #> [1] TRUE S_projected <- project_matrix(S, g_map[[1]]) S_projected #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 1.3747718 1.0985729 0.6960213 0.4960295 0.6960213 1.0985729 #> [2,] 1.0985729 1.3747718 1.0985729 0.6960213 0.4960295 0.6960213 #> [3,] 0.6960213 1.0985729 1.3747718 1.0985729 0.6960213 0.4960295 #> [4,] 0.4960295 0.6960213 1.0985729 1.3747718 1.0985729 0.6960213 #> [5,] 0.6960213 0.4960295 0.6960213 1.0985729 1.3747718 1.0985729 #> [6,] 1.0985729 0.6960213 0.4960295 0.6960213 1.0985729 1.3747718  # Plot the found matrix: plot(g_map, type = \"heatmap\")"},{"path":"https://przechoj.github.io/gips/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"Gaussian Model Invariant by Permutation Symmetry","text":"examples introduction, see vignette(\"gips\", package=\"gips\") pkgdown page.","code":""},{"path":"https://przechoj.github.io/gips/index.html","id":"acknowledgment","dir":"","previous_headings":"","what":"Acknowledgment","title":"Gaussian Model Invariant by Permutation Symmetry","text":"Project funded Warsaw University Technology within Excellence Initiative: Research University (IDUB) programme.","code":""},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Akaike's An Information Criterion for gips class — AIC.gips","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"Akaike's Information Criterion gips class","code":""},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"","code":"# S3 method for gips AIC(object, ..., k = 2)  # S3 method for gips BIC(object, ...)"},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"object object class \"gips\"; usually result find_MAP(). ... arguments ignored k numeric, penalty per parameter used;     default k = 2 classical AIC.","code":""},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"AIC.gips() returns calculated Akaike's Information Criterion normal model exists, returns NA. normal model reasonably approximated, returns NULL. failure situations, shows warning. information can found Existence likelihood section logLik.gips(). BIC.gips() returns calculated Schwarz's Bayesian Information Criterion","code":""},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"found permutation still require parameters n, Likelihood exist, thus function returns NULL. projected_cov (output project_matrix()) close singular, NA returned.","code":""},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"BIC(gips): Schwarz's Bayesian Information Criterion","code":""},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":"calculation-details","dir":"Reference","previous_headings":"","what":"Calculation details","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"details used formulas, see Information Criterion - AIC BIC section vignette(\"Theory\", package = \"gips\") pkgdown page.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/AIC.gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Akaike's An Information Criterion for gips class — AIC.gips","text":"","code":"S <- matrix(c(5.15,2.05,3.10,1.99,               2.05,5.09,2.03,3.07,               3.10,2.03,5.21,1.97,               1.99,3.07,1.97,5.13), nrow = 4) g <- gips(S, 14) AIC(g) # 238 #> [1] 237.6098  g_map <- find_MAP(g, optimizer = \"brute_force\") #> ================================================================================ AIC(g_map) # 224 < 238, so g_map is better than g in AIC #> [1] 223.6188 # ================================================================================ BIC(g) # 244 #> [1] 244.0004 BIC(g_map) # 226 < 244, so g_map is better than g in BIC #> [1] 225.536"},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform gips_perm object to character vector — as.character.gips_perm","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"Implementation S3 method.","code":""},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"","code":"# S3 method for gips_perm as.character(x, ...)"},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"x object gips_perm class. ... arguments passed permutations::.character.cycle().","code":""},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"Returns object character type.","code":""},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":".character(gips_perm):","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/as.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform gips_perm object to character vector — as.character.gips_perm","text":"","code":"g_perm <- gips_perm(permutations::as.cycle(\"(5,4)\"), 5) as.character(g_perm) #> [1] \"(4,5)\""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gamma function — calculate_gamma_function","title":"Calculate Gamma function — calculate_gamma_function","text":"calculates value integral defined Definition 11 references. implementation Theorem 8 references using formula (19) references.","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gamma function — calculate_gamma_function","text":"","code":"calculate_gamma_function(perm, lambda)"},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gamma function — calculate_gamma_function","text":"perm object gips_perm class. lambda positive real number.","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gamma function — calculate_gamma_function","text":"Returns value Gamma function colored cone (definition colored cone see Basic definitions section vignette(\"Theory\", package = \"gips\") pkgdown page).","code":""},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Gamma function — calculate_gamma_function","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kołodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. arXiv link; doi:10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/calculate_gamma_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Gamma function — calculate_gamma_function","text":"","code":"id_perm <- gips_perm(permutations::id, 2) calculate_gamma_function(id_perm, 0.5001) # 10.7... #> [1] 10.70139 calculate_gamma_function(id_perm, 0.50000001) # 19.9... #> [1] 19.91198 calculate_gamma_function(id_perm, 0.500000000001) # 29.1... #> [1] 29.12235  oldw <- getOption(\"warn\") options(warn = -1) calculate_gamma_function(id_perm, 0.5) # Inf #> [1] Inf # Integral diverges; returns Inf and warning options(warn = oldw)"},{"path":"https://przechoj.github.io/gips/reference/compare_posteriories_of_perms.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare the posteriori probabilities of 2 permutations — compare_posteriories_of_perms","title":"Compare the posteriori probabilities of 2 permutations — compare_posteriories_of_perms","text":"Check permutation likely much likely.","code":""},{"path":"https://przechoj.github.io/gips/reference/compare_posteriories_of_perms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare the posteriori probabilities of 2 permutations — compare_posteriories_of_perms","text":"","code":"compare_posteriories_of_perms(   perm1,   perm2 = \"()\",   S = NULL,   number_of_observations = NULL,   delta = 3,   D_matrix = NULL,   was_mean_estimated = TRUE,   print_output = TRUE )  compare_log_posteriories_of_perms(   perm1,   perm2 = \"()\",   S = NULL,   number_of_observations = NULL,   delta = 3,   D_matrix = NULL,   was_mean_estimated = TRUE,   print_output = TRUE )"},{"path":"https://przechoj.github.io/gips/reference/compare_posteriories_of_perms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare the posteriori probabilities of 2 permutations — compare_posteriories_of_perms","text":"perm1, perm2 Permutations compare. many times perm1 likely perm2? can provided gips object, gips_perm object anything can used x parameter gips_perm() function. class. S, number_of_observations, delta, D_matrix, was_mean_estimated parameters gips() function. least one perm1 perm2 gips class, overwritten gips object. print_output boolean. TRUE, computed value printed additional text returned invisibly. FALSE, computed value returned visibly.","code":""},{"path":"https://przechoj.github.io/gips/reference/compare_posteriories_of_perms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare the posteriori probabilities of 2 permutations — compare_posteriories_of_perms","text":"compare_posteriories_of_perms returns value many times perm1 likely perm2. compare_log_posteriories_of_perms returns logarithm many times perm1 likely perm2.","code":""},{"path":"https://przechoj.github.io/gips/reference/compare_posteriories_of_perms.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compare the posteriori probabilities of 2 permutations — compare_posteriories_of_perms","text":"compare_log_posteriories_of_perms(): stable, logarithmic version compare_posteriories_of_perms. natural logarithm used.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/compare_posteriories_of_perms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare the posteriori probabilities of 2 permutations — compare_posteriories_of_perms","text":"","code":"require(\"MASS\") # for mvrnorm() #> Loading required package: MASS  perm_size <- 6 mu <- runif(6, -10, 10) # Assume we don't know the mean sigma_matrix <- matrix(   data = c(     1.05, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.05, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.05, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.05, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.05, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.05   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations) g_map <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"Metropolis_Hastings\")  compare_posteriories_of_perms(g_map, g, print_output = FALSE) #> [1] 12.57415 compare_log_posteriories_of_perms(g_map, g, print_output = FALSE) #> [1] 2.531643"},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Maximum A Posteriori Estimation — find_MAP","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"Use one optimization algorithms find permutation maximizes posteriori probability based observed data. optimization algorithms always find MAP, try find significant value. information can found \"Possible algorithms use optimizers\" section .","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"","code":"find_MAP(   g,   max_iter = NA,   optimizer = NA,   show_progress_bar = TRUE,   save_all_perms = FALSE,   return_probabilities = FALSE )"},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"g Object gips class max_iter Number iterations algorithm perform. least 2. optimizer=\"MH\" finite; optimizer=\"HC\" can infinite; optimizer=\"BF\" used. optimizer optimizer search maximum posteriori. \"MH\" (default unoptimized g) - Metropolis-Hastings \"HC\" - Hill Climbing \"BF\" - Brute Force \"continue\" (default optimized g) - g optimized (see Examples). details, see \"Possible algorithms use optimizers\" section . show_progress_bar boolean. Indicate whether show progress bar. max_iter infinite, show_progress_bar FALSE. return_probabilities=TRUE, shows additional progress bar time probabilities calculated save_all_perms boolean. TRUE indicates save list permutations visited optimization. can useful, need lot RAM. return_probabilities boolean. TRUE can provided save_all_perms TRUE : optimizer=\"MH\" - use Metropolis-Hastings results estimate posterior probabilities optimizer=\"BF\" - use brute force results calculate exact posterior probabilities additional calculations costly, second progress bar shown (show_progress_bar TRUE). examine probabilities optimization, call get_probabilities_from_gips().","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"Returns optimized object gips class.","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"find_MAP can produce warning : optimizer \"hill_climbing\" gets end max_iter without converging. optimizer find permutation smaller n0 number_of_observations (information means, see \\(C\\sigma\\) n0 section vignette(\"Theory\", package = \"gips\") pkgdown page.","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"possible-algorithms-to-use-as-optimizers","dir":"Reference","previous_headings":"","what":"Possible algorithms to use as optimizers","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"-depth explanations, see vignette(\"Optimizers\", package = \"gips\") pkgdown page. every algorithm, aliases available. \"Metropolis_Hastings\", \"MH\" - use Metropolis-Hastings algorithm; see Wikipedia. algorithm draw random transposition every iteration consider changing current state (permutation). max_iter reached, algorithm return best permutation calculated far MAP Estimator. implements Second approach references, section 4.1.2. algorithm used context special case Simulated Annealing reader may familiar ; see Wikipedia. \"hill_climbing\", \"HC\" - use hill climbing algorithm; see Wikipedia. algorithm check transpositions every iteration go one biggest posteriori value. optimization ends neighbors smaller posteriori value. max_iter reached end, warning shown, recommended start optimization output find_MAP(). Remember p*(p-1)/2 transpositions checked every iteration. bigger p, may costly. \"brute_force\", \"BF\", \"full\" - use Brute Force algorithm checks whole permutation space given size. algorithm definitely find actual Maximum Posteriori Estimation computationally expensive bigger spaces. recommended p <= 8.","code":""},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kołodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. arXiv link; doi:10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/find_MAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Maximum A Posteriori Estimation — find_MAP","text":"","code":"require(\"MASS\") # for mvrnorm()  perm_size <- 5 mu <- runif(perm_size, -10, 10) # Assume we don't know the mean sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations)  g_map <- find_MAP(g, max_iter = 5, show_progress_bar = FALSE, optimizer = \"Metropolis_Hastings\") g_map #> The permutation (1,5,3,2) #>  - was found after 5 log_posteriori calculations #>  - is 2.862 times more likely than the starting, () permutation.  g_map2 <- find_MAP(g_map, max_iter = 5, show_progress_bar = FALSE, optimizer = \"continue\")  if (require(\"graphics\")) {   plot(g_map2, type = \"both\", logarithmic_x = TRUE) }   g_map_BF <- find_MAP(g, show_progress_bar = FALSE, optimizer = \"brute_force\") summary(g_map_BF) #> The optimized `gips` object. #>  #> Permutation: #>  (1,3,5,2,4) #>  #> Log_posteriori: #>  -11.98353 #>  #> Times more likely than starting permutation: #> 5227.817 #>  #> Number of observations: #>  13 #>  #> The mean in `S` matrix was estimated. #> Therefore, one degree of freedom was lost. #> There is 12 degrees of freedom left. #>  #> n0: #>  2 #>  #> Number of observations is bigger than n0 for this permutaion, #> so the gips model based on the found permutation does exist. #>  #> BIC: #>  119.871 #>  #> AIC: #>  118.1762 #>  #> -------------------------------------------------------------------------------- #> Optimization algorithm: #>  brute_force #>  #> Number of log_posteriori calls: #>  120 #>  #> Optimization time: #>  0.2305558 secs"},{"path":"https://przechoj.github.io/gips/reference/forget_perms.html","id":null,"dir":"Reference","previous_headings":"","what":"Forget the permutations for gips object optimized with save_all_perms = TRUE — forget_perms","title":"Forget the permutations for gips object optimized with save_all_perms = TRUE — forget_perms","text":"Slim gips object forgetting visited permutations find_MAP(save_all_perms = TRUE).","code":""},{"path":"https://przechoj.github.io/gips/reference/forget_perms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forget the permutations for gips object optimized with save_all_perms = TRUE — forget_perms","text":"","code":"forget_perms(g)"},{"path":"https://przechoj.github.io/gips/reference/forget_perms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forget the permutations for gips object optimized with save_all_perms = TRUE — forget_perms","text":"g object class \"gips\"; result find_MAP(save_all_perms = TRUE).","code":""},{"path":"https://przechoj.github.io/gips/reference/forget_perms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forget the permutations for gips object optimized with save_all_perms = TRUE — forget_perms","text":"Returns object g given, without visited permutation list.","code":""},{"path":"https://przechoj.github.io/gips/reference/forget_perms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forget the permutations for gips object optimized with save_all_perms = TRUE — forget_perms","text":"perm_size = 150 max_iter = 150000 checked saves ~350 MB RAM.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/forget_perms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forget the permutations for gips object optimized with save_all_perms = TRUE — forget_perms","text":"","code":"example_matrix <- matrix(rnorm(10 * 10), nrow = 10) S <- t(example_matrix) %*% example_matrix g <- gips(S, 13, was_mean_estimated = FALSE) g_map <- find_MAP(g,   max_iter = 10, optimizer = \"Metropolis_Hastings\",   show_progress_bar = FALSE, save_all_perms = TRUE )  object.size(g_map) # ~18 KB #> 17144 bytes g_map_slim <- forget_perms(g_map) object.size(g_map_slim) # ~8 KB #> 8784 bytes"},{"path":"https://przechoj.github.io/gips/reference/get_probabilities_from_gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract probabilities for gips object optimized with return_probabilities = TRUE — get_probabilities_from_gips","title":"Extract probabilities for gips object optimized with return_probabilities = TRUE — get_probabilities_from_gips","text":"gips object optimized find_MAP() function return_probabilities = TRUE, calculated probabilities can extracted function.","code":""},{"path":"https://przechoj.github.io/gips/reference/get_probabilities_from_gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract probabilities for gips object optimized with return_probabilities = TRUE — get_probabilities_from_gips","text":"","code":"get_probabilities_from_gips(g)"},{"path":"https://przechoj.github.io/gips/reference/get_probabilities_from_gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract probabilities for gips object optimized with return_probabilities = TRUE — get_probabilities_from_gips","text":"g object class \"gips\"; result find_MAP(return_probabilities = TRUE).","code":""},{"path":"https://przechoj.github.io/gips/reference/get_probabilities_from_gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract probabilities for gips object optimized with return_probabilities = TRUE — get_probabilities_from_gips","text":"Returns numeric vector, calculated values probabilities. Names contains permutations probability represent. gips object optimized find_MAP(return_probabilities = FALSE), returns NULL object.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/get_probabilities_from_gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract probabilities for gips object optimized with return_probabilities = TRUE — get_probabilities_from_gips","text":"","code":"g <- gips(matrix(c(1, 0.5, 0.5, 1.3), nrow = 2), 13, was_mean_estimated = FALSE) g_map <- find_MAP(g,   optimizer = \"BF\", show_progress_bar = FALSE,   return_probabilities = TRUE, save_all_perms = TRUE )  get_probabilities_from_gips(g_map) #>        ()     (1,2)  #> 0.1649846 0.8350154"},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Structure Constants — get_structure_constants","title":"Get Structure Constants — get_structure_constants","text":"Finds constants necessary internal calculations integrals eventually posteriori probability log_posteriori_of_gips().","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Structure Constants — get_structure_constants","text":"","code":"get_structure_constants(perm)"},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Structure Constants — get_structure_constants","text":"perm object gips_perm class.","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Structure Constants — get_structure_constants","text":"Returns list 5 items: r, d, k, L, dim_omega - vectors constants Theorem 1 references beginning section 3.1. references.","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Structure Constants — get_structure_constants","text":"Uses Theorem 5 references calculate constants.","code":""},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Structure Constants — get_structure_constants","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kołodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. arXiv link; doi:10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/get_structure_constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Structure Constants — get_structure_constants","text":"","code":"perm <- gips_perm(permutations::as.word(c(1, 2, 3, 5, 4)), 5) get_structure_constants(perm) #> $r #> [1] 4 1 #>  #> $d #> [1] 1 1 #>  #> $k #> [1] 1 1 #>  #> $L #> [1] 2 #>  #> $dim_omega #> [1] 10  1 #>"},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":null,"dir":"Reference","previous_headings":"","what":"The constructor of a gips class. — gips","title":"The constructor of a gips class. — gips","text":"Create gips object. object consist data information needed find likely invariant permutation. optimization performed. One must call find_MAP() function . See examples .","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The constructor of a gips class. — gips","text":"","code":"gips(   S,   number_of_observations,   delta = 3,   D_matrix = NULL,   was_mean_estimated = TRUE,   perm = \"\" )  new_gips(   list_of_gips_perm,   S,   number_of_observations,   delta,   D_matrix,   was_mean_estimated,   optimization_info )  validate_gips(g)"},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The constructor of a gips class. — gips","text":"S matrix; estimated covariance matrix. Z observed data: one know theoretical mean estimate observed mean, use S = cov(Z), leave parameter was_mean_estimated = TRUE default. one know theoretical mean 0, use S = (t(Z) %*% Z) / number_of_observations, set parameter was_mean_estimated = FALSE; number_of_observations number data points S based . delta number, hyper-parameter Bayesian model. bigger 2. See Hyperparameters section bellow. D_matrix symmetric, positive-definite matrix size S. Hyper-parameter Bayesian model. NULL, identity matrix taken. See Hyperparameters section bellow. was_mean_estimated boolean. Set TRUE (default) S parameter result stats::cov() function. Set FALSE S parameter result (t(Z) %*% Z) / number_of_observations calculation. perm optional permutation base gips object. Can gips_perm permutation class, anything function permutations::permutation() can handle. list_of_gips_perm list single element gips_perm class. base object gips object. optimization_info internal use . NULL list information optimization process. g Object checked whether proper object gips class.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The constructor of a gips class. — gips","text":"gips() returns object gips class safety checks. new_gips() returns object gips class without safety checks. validate_gips() returns argument unchanged. argument proper element gips class, produces error.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"The constructor of a gips class. — gips","text":"new_gips(): Constructor. intended low-level use. validate_gips(): Validator. intended low-level use.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"methods-for-a-gips-class","dir":"Reference","previous_headings":"","what":"Methods for a gips class","title":"The constructor of a gips class. — gips","text":"summary.gips() plot.gips() print.gips() logLik.gips() AIC.gips() BIC.gips()","code":""},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"hyperparameters","dir":"Reference","previous_headings":"","what":"Hyperparameters","title":"The constructor of a gips class. — gips","text":"Bayesian model, prior distribution covariance matrix generalized case Wishart distribution. brief introduction, see Bayesian model selection section vignette(\"Theory\", package = \"gips\") pkgdown page).","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The constructor of a gips class. — gips","text":"","code":"require(\"MASS\") # for mvrnorm()  perm_size <- 5 mu <- runif(5, -10, 10) # Assume we don't know the mean sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations)  g_map <- find_MAP(g, show_progress_bar = FALSE, optimizer = \"brute_force\") g_map #> The permutation (1,2,3,4,5) #>  - was found after 120 log_posteriori calculations #>  - is 652.096 times more likely than the starting, () permutation.  summary(g_map) #> The optimized `gips` object. #>  #> Permutation: #>  (1,2,3,4,5) #>  #> Log_posteriori: #>  -2.325699 #>  #> Times more likely than starting permutation: #> 652.096 #>  #> Number of observations: #>  13 #>  #> The mean in `S` matrix was estimated. #> Therefore, one degree of freedom was lost. #> There is 12 degrees of freedom left. #>  #> n0: #>  2 #>  #> Number of observations is bigger than n0 for this permutaion, #> so the gips model based on the found permutation does exist. #>  #> BIC: #>  107.2025 #>  #> AIC: #>  105.5076 #>  #> -------------------------------------------------------------------------------- #> Optimization algorithm: #>  brute_force #>  #> Number of log_posteriori calls: #>  120 #>  #> Optimization time: #>  0.2316523 secs  if (require(\"graphics\")) {   plot(g_map, type = \"both\", logarithmic_x = TRUE) }"},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation object — gips_perm","title":"Permutation object — gips_perm","text":"Create permutation objects passed functions gips package.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation object — gips_perm","text":"","code":"gips_perm(x, size)  new_gips_perm(rearranged_cycles, size)  validate_gips_perm(g)"},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation object — gips_perm","text":"x single object can interpreted permutations::permutation() function. example, character form \"(1,2)(4,5)\". See examples. size integer. Size permutation (AKA cardinality set, permutation defined; see examples). rearranged_cycles list rearranged integer vectors. vector corresponds single cycle permutation. g Object checked whether proper object gips_perm class.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation object — gips_perm","text":"gips_perm() returns object gips_perm class safety checks. new_gips_perm() returns object gips_perm class without safety checks. validate_gips_perm() returns argument unchanged. argument proper element gips_perm class, produces error.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Permutation object — gips_perm","text":"new_gips_perm(): Constructor. intended low-level use. validate_gips_perm(): Validator. intended low-level use.","code":""},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"methods-for-a-gips-class","dir":"Reference","previous_headings":"","what":"Methods for a gips class","title":"Permutation object — gips_perm","text":".character.gips_perm() print.gips_perm()","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/gips_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation object — gips_perm","text":"","code":"# All 7 following lines give the same output: gperm <- gips_perm(\"(12)(45)\", 5) gperm <- gips_perm(\"(1,2)(4,5)\", 5) gperm <- gips_perm(as.matrix(c(2,1,3,5,4)), 5) gperm <- gips_perm(t(as.matrix(c(2,1,3,5,4))), 5) # both way for a matrix works gperm <- gips_perm(list(list(c(2,1),c(4,5))), 5) gperm <- gips_perm(permutations::as.word(c(2, 1, 3, 5, 4)), 5) gperm <- gips_perm(permutations::as.cycle(\"(1,2)(4,5)\"), 5) gperm #> [1] (12)(45)  # note the necessity of `size` parameter: gperm <- gips_perm(\"(12)(45)\", 5) gperm <- gips_perm(\"(12)(45)\", 7) # this one is a different permutation  try(gperm <- gips_perm(\"(12)(45)\", 4)) #> Error in wrong_argument_abort(i = \"`size` attribute must be greater or equal to largest integer in elements of `x`.\",  :  #>   There was a problem identified with provided argument #> ℹ `size` attribute must be greater or equal to largest integer in elements of `x`. #> ✖ `size` equals 4 while the maximum element is 5 # Error, `size` was set to 4, while the permutation has the element 5."},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood for gips class — logLik.gips","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"Calculates Log-Likelihood sample based gips object.","code":""},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"","code":"# S3 method for gips logLik(object, ..., tol = 1e-07)"},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"object object class \"gips\"; usually result find_MAP(). ... arguments passed methods. tol tolerance det(projected_cov). det smaller tol, NA returned.","code":""},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"Log-Likelihood sample. one exists, returns NA. reasonably approximated, returns NULL. failure situations, shows warning. information can found Existence likelihood section .","code":""},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"always biggest perm = \"()\" (provided p <= n). found permutation still require parameters n, Likelihood exist, thus function returns NULL. projected_cov (output project_matrix()) close singular, NA returned.","code":""},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":"existence-of-likelihood","dir":"Reference","previous_headings":"","what":"Existence of likelihood","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"consider non-degenerate multivariate normal model. gips context, model exists number observations bigger equal n0. get n0 gips object g, call summary(g)$n0. case n < n0, model exist, likelihood exist. case, logLik.gips() return NULL show warning. n >= n0, estimated covariance matrix close singular, likelihood reasonably estimated. case, logLik.gips() return NA show warning. information, refer \\(C_\\sigma\\) n0 section vignette(\"Theory\", package = \"gips\") pkgdown page.","code":""},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":"calculation-details","dir":"Reference","previous_headings":"","what":"Calculation details","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"details used formulas, see Information Criterion - AIC BIC section vignette(\"Theory\", package = \"gips\") pkgdown page.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/logLik.gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Log-Likelihood for gips class — logLik.gips","text":"","code":"S <- matrix(c(5.15,2.05,3.60,1.99,               2.05,5.09,2.03,3.57,               3.60,2.03,5.21,1.97,               1.99,3.57,1.97,5.13), nrow = 4) g <- gips(S, 5) logLik(g) # -32.67048 #> [1] -32.67048 #> attr(,\"df\") #> [1] 10 #> attr(,\"nobs\") #> [1] 5 # For perm = \"\", which is default, there is p + choose(p, 2) degrees of freedom  g_map <- find_MAP(g, optimizer = \"brute_force\") #> ================================================================================ logLik(g_map) # -32.6722 # this will always be smaller than `logLik(gips(S, n, perm = \"\"))` #> [1] -32.6722 #> attr(,\"df\") #> [1] 3 #> attr(,\"nobs\") #> [1] 5  g_n_too_small <- gips(S, 4) logLik(g_n_too_small) # NULL # the likelihood does not exists #> Warning: The likelihood is not defined for this `gips`. #> ✖ The n = 4 is smaller than the minimum required n0 = 5. For more information see section **Existence of likelihood** in documentation `?logLik.gips` or its [pkgdown page](https://przechoj.github.io/gips/reference/logLik.gips.html). #> NULL"},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":null,"dir":"Reference","previous_headings":"","what":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","title":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","text":"precisely, logarithm unnormalized posterior probability. goal function optimization algorithms find_MAP() function. perm_proposal maximizes function Maximum Posteriori (MAP) Estimator.","code":""},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","text":"","code":"log_posteriori_of_gips(g)"},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","text":"g object gips_perm class.","code":""},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","text":"Returns value logarithm unnormalized Posteriori.","code":""},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","text":"calculated using formulas (33) (27) references. Inf NaN reached, produces warning.","code":""},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kołodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. arXiv link; doi:10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/log_posteriori_of_gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A log of a posteriori that the covariance matrix is invariant under permutation — log_posteriori_of_gips","text":"","code":"# In the space with p = 2, there is only 2 permutations: perm1 <- permutations::as.cycle(permutations::as.word(c(1, 2))) # (1)(2) perm2 <- permutations::as.cycle(permutations::as.word(c(2, 1))) # (1,2) S1 <- matrix(c(1, 0.5, 0.5, 2), nrow = 2, byrow = TRUE) g1 <- gips(S1, 100, perm = perm1) g2 <- gips(S1, 100, perm = perm2) log_posteriori_of_gips(g1) # -136.6, this is the MAP Estimator #> [1] -135.3433 log_posteriori_of_gips(g2) # -140.4 #> [1] -139.0036  exp(log_posteriori_of_gips(g1) - log_posteriori_of_gips(g2)) # 41.3 #> [1] 38.87122 # g1 is over 40 times more likely than g2. # This is the expected outcome because S[1,1] significantly differs from S[2,2].  # ========================================================================  S2 <- matrix(c(1, 0.5, 0.5, 1.1), nrow = 2, byrow = TRUE) g1 <- gips(S2, 100, perm = perm1) g2 <- gips(S2, 100, perm = perm2) log_posteriori_of_gips(g1) # -99.5 #> [1] -98.54173 log_posteriori_of_gips(g2) # -96.9, this is the MAP Estimator #> [1] -96.00429  exp(log_posteriori_of_gips(g2) - log_posteriori_of_gips(g1)) # 12.7 #> [1] 12.64729 # g2 is over 12 times more likely than g1. # This is the expected outcome because S[1,1] is very close to S[2,2]."},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot optimized matrix or optimization gips object — plot.gips","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"Plot heatmap MAP covariance matrix estimator convergence optimization method. plot depends type argument.","code":""},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"","code":"# S3 method for gips plot(   x,   type = NA,   logarithmic_y = TRUE,   logarithmic_x = FALSE,   color = NULL,   title_text = \"Convergence plot\",   xlabel = NULL,   ylabel = NULL,   show_legend = TRUE,   ylim = NULL,   xlim = NULL,   ... )"},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"x Object gips class. type single character. One c(\"heatmap\", \"\", \"best\", \"\", \"block_heatmap\"). \"heatmap\" - Plots heatmap S matrix inside gips object projected permutation gips object. \"\" - Plots line posteriori visited states. \"best\" - Plots line biggest posteriori found time. \"\" - Plots lines \"\" \"best\". \"block_heatmap\" - Plots heatmap diagonally block representation S. Non-block entries (equal 0) white better clarity. information see Block Decomposition - [1], Theorem 1 section vignette(\"Theory\", package = \"gips\") pkgdown page). default value NA, changed \"heatmap\" non-optimized gips objects \"\" optimized ones. Using default produces warning. arguments ignored type = \"heatmap\". logarithmic_y, logarithmic_x boolean. Sets axis plot logarithmic scale. color Vector colors used plot lines. title_text Text title plot. xlabel Text bottom plot. ylabel Text left plot. show_legend boolean. Whether show legend. ylim Limits y axis. NULL, minimum maximum log_posteriori_of_gips() taken. xlim Limits x axis. NULL, whole optimization process shown. ... Additional arguments passed stats::heatmap() various elements plot.","code":""},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"type one \"\", \"best\" \"\", returns invisible NULL. type one \"heatmap\" \"block_heatmap\", returns object class ggplot.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/plot.gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot optimized matrix or optimization gips object — plot.gips","text":"","code":"require(\"MASS\") # for mvrnorm()  perm_size <- 6 mu <- runif(6, -10, 10) # Assume we don't know the mean sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations) if (require(\"graphics\")) {   plot(g, type = \"heatmap\") }   g_map <- find_MAP(g, max_iter = 30, show_progress_bar = FALSE, optimizer = \"hill_climbing\") if (require(\"graphics\")) {   plot(g_map, type = \"both\", logarithmic_x = TRUE) }   if (require(\"graphics\")) {   plot(g_map, type = \"heatmap\") }  # Now, the output is (most likely) different because the permutation   # `g_map[[1]]` is (most likely) not an identity permutation."},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare orthogonal matrix — prepare_orthogonal_matrix","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"Calculate orthogonal matrix U_Gamma decomposition Theorem 1 references.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"","code":"prepare_orthogonal_matrix(perm, perm_size = NULL, basis = NULL)"},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"perm object gips_perm permutations::cycle class. perm_size Size permutation. Required perm permutations::cycle class. basis matrix basis vectors COLUMNS. Identity default.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"square matrix size perm_size perm_size columns vector elements \\(v_k^{(c)}\\) according Theorem 6 references.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"Given X - matrix invariant permutation perm. Call Gamma permutations cyclic group \\(<perm> = \\{perm, perm^2, ...\\}\\). , U_Gamma orthogonal matrix, block-diagonalizes X. precise, matrix t(U_Gamma) %*% X %*% U_Gamma block-diagonal structure, ensured Theorem 1 references Formula U_Gamma can found Theorem 6 references.","code":""},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"Piotr Graczyk, Hideyuki Ishi, Bartosz Kołodziejek, Hélène Massam. \"Model selection space Gaussian models invariant symmetry.\" Annals Statistics, 50(3) 1747-1774 June 2022. arXiv link; doi:10.1214/22-AOS2174","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/prepare_orthogonal_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare orthogonal matrix — prepare_orthogonal_matrix","text":"","code":"gperm <- gips_perm(\"(1,2,3)(4,5)\", 5) U_Gamma <- prepare_orthogonal_matrix(gperm)  number_of_observations <- 10 X <- matrix(rnorm(5 * number_of_observations), number_of_observations, 5) S <- cov(X) X <- project_matrix(S, perm = gperm) # this matrix in invariant under gperm  block_decomposition <- t(U_Gamma) %*% X %*% U_Gamma round(block_decomposition, 5) # the non-zeros only on diagonal and [1,2] and [2,1] #>          [,1]     [,2]    [,3]    [,4]    [,5] #> [1,]  1.82679 -0.00755 0.00000 0.00000 0.00000 #> [2,] -0.00755  1.16054 0.00000 0.00000 0.00000 #> [3,]  0.00000  0.00000 1.26634 0.00000 0.00000 #> [4,]  0.00000  0.00000 0.00000 1.26634 0.00000 #> [5,]  0.00000  0.00000 0.00000 0.00000 0.86911"},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing gips object — print.gips","title":"Printing gips object — print.gips","text":"Printing function gips class.","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing gips object — print.gips","text":"","code":"# S3 method for gips print(   x,   digits = 3,   compare_to_original = TRUE,   log_value = FALSE,   oneline = FALSE,   ... )"},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing gips object — print.gips","text":"x object gips class. digits number digits comma posteriori presented. can negative. default, Inf. passed base::round(). compare_to_original logical. Whether print many times likely current permutation compared : identity permutation () (unoptimized gips object); starting permutation (optimized gips object). log_value logical. Whether print value log_posteriori_of_gips(). Default FALSE. oneline logical. Whether print one multiple lines. Default FALSE. ... additional arguments passed base::cat().","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing gips object — print.gips","text":"Returns invisible NULL.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/print.gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing gips object — print.gips","text":"","code":"S <- matrix(c(1, 0.5, 0.5, 2), nrow = 2, byrow = TRUE) g <- gips(S, 10) print(g, digits = 4) #> The permutation () #>  - is 1 times more likely than the id, () permutation."},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing gips_perm object — print.gips_perm","title":"Printing gips_perm object — print.gips_perm","text":"Printing function gips_perm class.","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing gips_perm object — print.gips_perm","text":"","code":"# S3 method for gips_perm print(x, ...)"},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing gips_perm object — print.gips_perm","text":"x object gips_perm class. ... arguments passed permutations::print.cycle().","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing gips_perm object — print.gips_perm","text":"Returns argument invisibly, printing .","code":""},{"path":"https://przechoj.github.io/gips/reference/print.gips_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing gips_perm object — print.gips_perm","text":"","code":"g_perm <- gips_perm(permutations::as.cycle(\"(5,4)\"), 5) print(g_perm) #> [1] (45)"},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Project matrix after optimization — project_matrix","title":"Project matrix after optimization — project_matrix","text":"MAP permutation found find_MAP(), use permutation approximate covariance matrix larger statistical confidence.","code":""},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project matrix after optimization — project_matrix","text":"","code":"project_matrix(S, perm, precomputed_equal_indices = NULL)"},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project matrix after optimization — project_matrix","text":"S square matrix projected. covariance estimator. (See parameter gips() function). perm permutation. Generator permutation group. g gips object, g[[1]] can used perm. Either gips_perm class anything can used x argument gips_perm() function. precomputed_equal_indices parameter internal use .","code":""},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project matrix after optimization — project_matrix","text":"Returns matrix S projected space symmetrical matrices invariant cyclic group generated perm. See Details .","code":""},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Project matrix after optimization — project_matrix","text":"Project matrix space symmetrical matrices invariant cyclic group generated perm. implements formal Definition 3 references. S sample covariance matrix (output cov() function, see examples), S unbiased estimator covariance matrix. However, maximum likelihood estimator covariance matrix S*(n-1)/(n), unless n < p, maximum likelihood estimator exist. information, see Wikipedia - Estimation covariance matrices. maximum likelihood estimator differs one knows covariance matrix invariant permutation. estimator symmetric also values repeated (see examples Corollary 12 references). estimator invariant given permutation. Also, need fewer observations maximum likelihood estimator exist (see Project Matrix - Equation (6) section vignette(\"Theory\", package = \"gips\") pkgdown page). permutations, even \\(n = 2\\) enough. minimal number observations needed named n0 can calculated summary.gips(). details, see Project Matrix - Equation (6) section vignette(\"Theory\", package = \"gips\") pkgdown page.","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/project_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project matrix after optimization — project_matrix","text":"","code":"p <- 6 my_perm <- \"(14)(23)\" # permutation (1,4)(2,3)(5)(6) number_of_observations <- 10 X <- matrix(rnorm(p * number_of_observations), number_of_observations, p) S <- cov(X) projected_S <- project_matrix(S, perm = my_perm) projected_S #>              [,1]        [,2]        [,3]         [,4]         [,5]       [,6] #> [1,]  1.141415430 -0.06884253 -0.26122365  0.131800026 -0.008293801 0.44660990 #> [2,] -0.068842526  0.68962655  0.04921205 -0.261223647  0.194366471 0.06850764 #> [3,] -0.261223647  0.04921205  0.68962655 -0.068842526  0.194366471 0.06850764 #> [4,]  0.131800026 -0.26122365 -0.06884253  1.141415430 -0.008293801 0.44660990 #> [5,] -0.008293801  0.19436647  0.19436647 -0.008293801  1.299789581 0.63009428 #> [6,]  0.446609904  0.06850764  0.06850764  0.446609904  0.630094284 1.16023652 # The value in [1,1] is the same as in [4,4]; also, [2,2] and [3,3];   # also [1,2] and [4,3]; also, [1,5] and [4,5]; and so on  # Plot the projected matrix: g <- gips(S, number_of_observations, perm = my_perm) plot(g, type = \"heatmap\")   # Find the MAP Estimator g_MAP <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"Metropolis_Hastings\") S_MAP <- project_matrix(S, perm = g_MAP[[1]]) S_MAP #>             [,1]        [,2]        [,3]        [,4]        [,5]      [,6] #> [1,]  0.99237471  0.07656958 -0.09796457  0.07656958 -0.09796457 0.3320659 #> [2,]  0.07656958  0.99237471 -0.09796457 -0.09796457  0.07656958 0.3320659 #> [3,] -0.09796457 -0.09796457  0.99237471  0.07656958  0.07656958 0.3320659 #> [4,]  0.07656958 -0.09796457  0.07656958  0.99237471 -0.09796457 0.3320659 #> [5,] -0.09796457  0.07656958  0.07656958 -0.09796457  0.99237471 0.3320659 #> [6,]  0.33206587  0.33206587  0.33206587  0.33206587  0.33206587 1.1602365 plot(g_MAP, type = \"heatmap\")"},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing the gips object — summary.gips","title":"Summarizing the gips object — summary.gips","text":"summary method class \"gips\".","code":""},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing the gips object — summary.gips","text":"","code":"# S3 method for gips summary(object, ...)  # S3 method for summary.gips print(x, ...)"},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing the gips object — summary.gips","text":"object object class \"gips\"; usually result find_MAP(). ... arguments passed methods. x object class \"summary.gips\" printed","code":""},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing the gips object — summary.gips","text":"function summary.gips computes returns list summary statistics given gips object. : unoptimized gips object: optimized - FALSE start_permutation - permutation gips represents start_permutation_log_posteriori - log posteriori value start permutation times_more_likely_than_id - many likely start_permutation identity permutation, (). can number less 1, means identity permutation, (), likely. Keep mind number can really big can overflowed Inf n0 - minimal number observations needed existence maximum likelihood estimator (corresponding MAP) covariance matrix (see \\(C\\sigma\\) n0 section vignette(\"Theory\", package = \"gips\") pkgdown page). S_matrix - underlying matrix; used calculate posteriori value number_of_observations - number observations observed S_matrix calculated; used calculate posteriori value was_mean_estimated - given user creating gips object: TRUE means S parameter output stats::cov() function FALSE means S parameter calculated S = t(X) %*% X / number_of_observations delta, D_matrix - parameters Bayesian method AIC, BIC - output AIC.gips() BIC.gips() functions optimized gips object: optimized - TRUE found_permutation - permutation gips represents; visited permutation biggest posteriori value found_permutation_log_posteriori - log posteriori value found permutation start_permutation - original permutation gips represented optimization; first visited permutation start_permutation_log_posteriori - log posteriori value start permutation times_more_likely_than_start - many likely found_permutation start_permutation. number less 1. Keep mind number can really big can overflowed Inf n0 - minimal number observations needed existence maximum likelihood estimator (corresponding MAP) covariance matrix (see \\(C\\sigma\\) n0 section vignette(\"Theory\", package = \"gips\") pkgdown page). S_matrix - underlying matrix; used calculate posteriori value number_of_observations - number observations observed S_matrix calculated; used calculate posteriori value was_mean_estimated - given user creating gips object: TRUE means S parameter output stats::cov() function FALSE means S parameter calculated S = t(X) %*% X / number_of_observations delta, D_matrix - parameters Bayesian method AIC, BIC - output AIC.gips() BIC.gips() functions optimization_algorithm_used - used optimization algorithms order (one start optimization \"MH\", \"HC\") did_converge - boolean, last used algorithm converge number_of_log_posteriori_calls - many times log_posteriori_of_gips() function called optimization whole_optimization_time - long optimization process; sum optimization times (multiple) log_posteriori_calls_after_best - many times log_posteriori_of_gips() function called found_permutation; words, long ago optimization stopped result; value small, consider running find_MAP() one time optimizer = \"continue\". optimizer = \"BF\", NULL acceptance_rate - interesting optimizer = \"MH\"; often algorithm accepting change permutation iteration print.summary.gips returns invisible NULL.","code":""},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Summarizing the gips object — summary.gips","text":"print(summary.gips): Printing method class \"summary.gips\". Prints every interesting information pleasant, human readable form","code":""},{"path":[]},{"path":"https://przechoj.github.io/gips/reference/summary.gips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing the gips object — summary.gips","text":"","code":"require(\"MASS\") # for mvrnorm()  perm_size <- 6 mu <- runif(6, -10, 10) # Assume we don't know the mean sigma_matrix <- matrix(   data = c(     1.0, 0.8, 0.6, 0.4, 0.6, 0.8,     0.8, 1.0, 0.8, 0.6, 0.4, 0.6,     0.6, 0.8, 1.0, 0.8, 0.6, 0.4,     0.4, 0.6, 0.8, 1.0, 0.8, 0.6,     0.6, 0.4, 0.6, 0.8, 1.0, 0.8,     0.8, 0.6, 0.4, 0.6, 0.8, 1.0   ),   nrow = perm_size, byrow = TRUE ) # sigma_matrix is a matrix invariant under permutation (1,2,3,4,5,6) number_of_observations <- 13 Z <- MASS::mvrnorm(number_of_observations, mu = mu, Sigma = sigma_matrix) S <- cov(Z) # Assume we have to estimate the mean  g <- gips(S, number_of_observations)  g_map <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"Metropolis_Hastings\") unclass(summary(g_map)) #> $optimized #> [1] TRUE #>  #> $found_permutation #> [1] () #>  #> $found_permutation_log_posteriori #> [1] -8.835444 #>  #> $start_permutation #> [1] () #>  #> $start_permutation_log_posteriori #> [1] -8.835444 #>  #> $times_more_likely_than_start #> [1] 1 #>  #> $log_times_more_likely_than_start #> [1] 0 #>  #> $n0 #> [1] 7 #>  #> $S_matrix #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.8229375 0.4450851 0.3859458 0.1205820 0.4984345 0.5575737 #> [2,] 0.4450851 0.5098441 0.3675434 0.2617136 0.1969545 0.3392553 #> [3,] 0.3859458 0.3675434 0.5222922 0.2657410 0.2841434 0.1293946 #> [4,] 0.1205820 0.2617136 0.2657410 0.5564648 0.4153332 0.4113058 #> [5,] 0.4984345 0.1969545 0.2841434 0.4153332 0.7168131 0.6296242 #> [6,] 0.5575737 0.3392553 0.1293946 0.4113058 0.6296242 0.8394849 #>  #> $number_of_observations #> [1] 13 #>  #> $was_mean_estimated #> [1] TRUE #>  #> $delta #> [1] 3 #>  #> $D_matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    0    0    0    0    0 #> [2,]    0    1    0    0    0    0 #> [3,]    0    0    1    0    0    0 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    1    0 #> [6,]    0    0    0    0    0    1 #>  #> $AIC #> [1] NA #>  #> $BIC #> [1] NA #>  #> $optimization_algorithm_used #> [1] \"Metropolis_Hastings\" #>  #> $did_converge #> NULL #>  #> $number_of_log_posteriori_calls #> [1] 10 #>  #> $whole_optimization_time #> Time difference of 0.01943374 secs #>  #> $log_posteriori_calls_after_best #> [1] 9 #>  #> $acceptance_rate #> [1] 0 #>   g_map2 <- find_MAP(g, max_iter = 10, show_progress_bar = FALSE, optimizer = \"hill_climbing\") summary(g_map2) #> The optimized `gips` object. #>  #> Permutation: #>  (1,4)(2,5)(3,6) #>  #> Log_posteriori: #>  -2.010756 #>  #> Times more likely than starting permutation: #> 920.289 #>  #> Number of observations: #>  13 #>  #> The mean in `S` matrix was estimated. #> Therefore, one degree of freedom was lost. #> There is 12 degrees of freedom left. #>  #> n0: #>  4 #>  #> Number of observations is bigger than n0 for this permutaion, #> so the gips model based on the found permutation does exist. #>  #> BIC: #>  NA #>  #> AIC: #>  NA #>  #> -------------------------------------------------------------------------------- #> Optimization algorithm: #>  hill_climbing did converge #>  #> Number of log_posteriori calls: #>  61 #>  #> Optimization time: #>  0.1081624 secs #>  #> Log_posteriori calls after the found permutation: #>  18 # ================================================================================ S <- matrix(c(1, 0.5, 0.5, 2), nrow = 2, byrow = TRUE) g <- gips(S, 10) print(summary(g)) #> The unoptimized `gips` object. #>  #> Permutation: #>  () #>  #> Log_posteriori: #>  -16.56396 #>  #> Times more likely than identity permutation: #> 1 #>  #> Number of observations: #>  10 #>  #> The mean in `S` matrix was estimated. #> Therefore, one degree of freedom was lost. #> There is 9 degrees of freedom left. #>  #> n0: #>  3 #>  #> Number of observations is bigger than n0 for this permutaion, #> so the gips model based on the found permutation does exist. #>  #> BIC: #>  63.02608 #>  #> AIC: #>  62.11833"},{"path":[]},{"path":"https://przechoj.github.io/gips/news/index.html","id":"new-functions-1-1-0-9000","dir":"Changelog","previous_headings":"","what":"New functions","title":"gips 1.1.0.9000","text":"BIC.gips() AIC.gips() logLik.gips()","code":""},{"path":"https://przechoj.github.io/gips/news/index.html","id":"bugfixes-1-1-0-9000","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"gips 1.1.0.9000","text":"Sometimes post_probabilities underflows 0. appropriately validated now. NaNs occur find_MAP() D_matrix <- diag(ncol(S)) * D_coef 1000 < D_coef < 1e300. NaNs occur find_MAP(), throw error (used show warning). Inf better handled print.gips() print.*() print \\n end Small Vignettes documentation improvements Proper testing examples","code":""},{"path":"https://przechoj.github.io/gips/news/index.html","id":"gips-100","dir":"Changelog","previous_headings":"","what":"gips 1.0.0","title":"gips 1.0.0","text":"CRAN release: 2022-10-13 first release gips.","code":""}]
